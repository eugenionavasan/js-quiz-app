import { QuizData } from "../../types/quiz";

export const quizData: QuizData = {
  javaScript: {
    easy: [
      { question: "What is the purpose of `let` and `const` in JavaScript?", options: ["Declare functions", "Declare variables", "Define CSS styles", "Create HTML elements"], answer: 1 },
      { question: "What is `NaN` in JavaScript?", options: ["A function", "An undefined value", "Not a Number", "Null value"], answer: 2 },
      { question: "What does `typeof` operator do in JavaScript?", options: ["Returns data type", "Returns function name", "Creates a new array", "Modifies a string"], answer: 0 },
      { question: "What is a closure in JavaScript?", options: ["A data type", "An error", "A function inside another function that has access to the outer function's variables", "A class instance"], answer: 2 },
      { question: "What is the default value of `undefined` in JavaScript?", options: ["null", "false", "undefined", "0"], answer: 2 },
      { question: "What is the difference between `var` and `let` in JavaScript?", options: ["`let` is block-scoped, `var` is function-scoped", "`let` is function-scoped, `var` is block-scoped", "Both are identical", "`let` is hoisted and `var` is not"], answer: 0 },
      { question: "Which method is used to round a number to the nearest integer in JavaScript?", options: ["Math.ceil()", "Math.floor()", "Math.round()", "Math.abs()"], answer: 2 },
      { question: "What is the result of `2 + '2'` in JavaScript?", options: ["22", "4", "NaN", "Error"], answer: 0 },
      { question: "What is the purpose of `JSON.stringify()` in JavaScript?", options: ["To parse JSON", "To convert a string into an object", "To convert an object into a string", "To iterate over JSON"], answer: 2 },
      { question: "What does the `push()` method do in JavaScript arrays?", options: ["Removes the last element", "Adds one or more elements to the end", "Removes the first element", "Adds one or more elements to the beginning"], answer: 1 },
      { question: "What is a promise in JavaScript?", options: ["A way to handle HTTP requests", "A placeholder for a value that will eventually resolve", "A loop in JavaScript", "A way to handle exceptions"], answer: 1 },
      { question: "How do you convert a string to a number in JavaScript?", options: ["parseInt()", "Number()", "Both `parseInt()` and `Number()`", "toString()"], answer: 2 },
      { question: "What does the `filter()` method do in JavaScript arrays?", options: ["Removes elements from the array", "Returns a new array with elements that pass a test", "Returns the first element of an array", "Sorts the array"], answer: 1 },
      { question: "How do you declare an arrow function in JavaScript?", options: ["function myFunction() {}", "() => {}", "const myFunction = () {}", "arrow function() {}"], answer: 1 },
      { question: "What is the output of `typeof null` in JavaScript?", options: ["null", "undefined", "object", "function"], answer: 2 },
      { question: "How do you remove the last element of an array in JavaScript?", options: ["pop()", "shift()", "unshift()", "push()"], answer: 0 },
      { question: "Which of the following is a falsy value in JavaScript?", options: ["null", "0", "undefined", "All of the above"], answer: 3 },
      { question: "What does `Array.prototype.slice()` do in JavaScript?", options: ["Modifies the original array", "Returns a shallow copy of a portion of the array", "Merges two arrays", "Removes an element from the array"], answer: 1 },
      { question: "What is the purpose of the `forEach()` method in JavaScript?", options: ["Executes a function once for each array element", "Maps the array to a new array", "Filters the array", "Sorts the array"], answer: 0 },
    ],
    medium: [
      { question: "What is the difference between `==` and `===` in JavaScript?", options: ["Both compare values equally", "`==` checks type and value, `===` only checks value", "`===` checks type and value, `==` only checks value", "`==` checks length, `===` checks value"], answer: 2 },
      { question: "How does event delegation work in JavaScript?", options: ["A parent element handles events triggered by its child elements", "An element passes events to its parent", "Events are delegated to the closest element", "Events are delegated based on the event type"], answer: 0 },
      { question: "What are promises in JavaScript?", options: ["A way to delay code execution", "A placeholder for a value that will eventually resolve", "A type of loop", "A method to fetch data"], answer: 1 },
      { question: "What is `this` keyword in JavaScript?", options: ["Refers to the current function", "Refers to the global object", "Refers to the current object in which the code is running", "Refers to an event handler"], answer: 2 },
      { question: "What is the purpose of `Array.prototype.map()`?", options: ["Iterates through an array and modifies it", "Creates a new array with results from a callback function", "Deletes elements from an array", "Sorts an array"], answer: 1 },
      { question: "What is the purpose of the `call()` method in JavaScript?", options: ["Invokes a function with a given `this` value", "Creates a new object", "Defines a prototype", "Adds event listeners"], answer: 0 },
      { question: "How does the `bind()` method work in JavaScript?", options: ["Creates a new function with a bound `this` value", "Binds events to an element", "Attaches a function to an object", "None of the above"], answer: 0 },
      { question: "What is the `arguments` object in JavaScript functions?", options: ["An array containing all passed arguments", "An object containing all passed arguments", "A method for passing arguments", "A property of the `this` keyword"], answer: 1 },
      { question: "How do closures work in JavaScript?", options: ["They allow a function to access variables from its parent scope", "They create global variables", "They prevent access to local variables", "They store a list of function parameters"], answer: 0 },
      { question: "What is the difference between `for...in` and `for...of` loops in JavaScript?", options: ["`for...in` iterates over property names, `for...of` iterates over values", "`for...of` iterates over property names, `for...in` iterates over values", "Both loops do the same", "Neither loop works for objects"], answer: 0 },
      { question: "What is the purpose of the `eval()` function in JavaScript?", options: ["Executes a string of JavaScript code", "Evaluates an array", "Executes an object", "Adds event listeners"], answer: 0 },
      { question: "What is the concept of 'hoisting' in JavaScript?", options: ["Functions and variables are moved to the top of their scope", "JavaScript variables must be declared", "Functions can only be declared inside objects", "None of the above"], answer: 0 },
      { question: "What is the difference between function declaration and function expression in JavaScript?", options: ["Function declarations are hoisted, function expressions are not", "Function expressions are hoisted, function declarations are not", "Both are hoisted", "Neither is hoisted"], answer: 0 },
      { question: "How do you create an object in JavaScript?", options: ["Using object literals", "Using the `new` keyword", "Using constructors", "All of the above"], answer: 3 },
      { question: "What is the purpose of the `reduce()` method in JavaScript arrays?", options: ["Returns a new array", "Iterates through an array and returns a single value", "Modifies an array", "Filters an array"], answer: 1 },
      { question: "What does the `Object.assign()` method do?", options: ["Copies all enumerable own properties from one or more objects to a target object", "Assigns event listeners", "Assigns object methods", "Defines getters and setters"], answer: 0 },
      { question: "What is the `prototype` in JavaScript?", options: ["An object from which other objects inherit properties and methods", "A method for creating new objects", "A way to copy objects", "A class definition"], answer: 0 },
      { question: "How do JavaScript timers (`setTimeout`, `setInterval`) work?", options: ["They run synchronously", "They run asynchronously", "They are part of the JavaScript core", "They can only be used in browsers"], answer: 1 },
      { question: "What is the purpose of the `new` keyword in JavaScript?", options: ["It creates a new object from a constructor function", "It creates new functions", "It initializes variables", "None of the above"], answer: 0 },
      { question: "What is the purpose of the `Object.keys()` method in JavaScript?", options: ["Returns an array of an object's keys", "Returns an array of an object's values", "Returns an array of an object's methods", "Modifies the object"], answer: 0 },
    ],
    hard: [
      { question: "What is the event loop in JavaScript?", options: ["A function that triggers events", "A concurrency model to handle asynchronous tasks", "A loop that runs over event listeners", "A way to schedule tasks in JavaScript"], answer: 1 },
      { question: "What are generator functions in JavaScript?", options: ["Functions that create objects", "Functions that can be paused and resumed", "Asynchronous functions", "Functions that trigger events"], answer: 1 },
      { question: "Explain the concept of 'hoisting' in JavaScript.", options: ["Functions and variables are moved to the top of their scope", "An object can inherit properties", "Event handlers are prioritized", "Data types are converted automatically"], answer: 0 },
      { question: "What is the purpose of the `Proxy` object in JavaScript?", options: ["Allows direct control over the behavior of an object", "Creates a shallow copy of an object", "Handles promises in a clean way", "Allows for data binding in templates"], answer: 0 },
      { question: "What are modules in JavaScript?", options: ["A way to encapsulate data", "A way to create classes", "Files or pieces of code that are reusable and exportable", "A type of object"], answer: 2 },
      { question: "What is the difference between `null` and `undefined` in JavaScript?", options: ["`null` is an intentional absence of any value, `undefined` is unintentional", "`null` is unintentional, `undefined` is intentional", "Both represent absence of value", "They are identical"], answer: 0 },
      { question: "How does JavaScript handle memory management?", options: ["It uses a garbage collector to free up memory", "It relies on the programmer to free memory", "JavaScript does not handle memory", "It uses reference counting"], answer: 0 },
      { question: "What is the purpose of `WeakMap` in JavaScript?", options: ["It allows garbage collection of keys without reference", "It maps keys to values", "It creates a shallow copy of a map", "It binds functions to objects"], answer: 0 },
      { question: "What is the Temporal Dead Zone in JavaScript?", options: ["The period between entering a block and the variable being declared", "A memory leak in asynchronous code", "A time delay between promises", "The period after garbage collection"], answer: 0 },
      { question: "How do JavaScript closures maintain state?", options: ["They preserve local variables in the lexical environment", "They store variables globally", "They convert variables to constants", "They prevent function execution"], answer: 0 },
      { question: "What is memoization in JavaScript?", options: ["A technique to optimize performance by caching function results", "A way to modify the DOM", "A method for deep copying objects", "A strategy for resolving promises"], answer: 0 },
      { question: "What is tail call optimization in JavaScript?", options: ["An optimization that eliminates the need for additional stack frames", "A way to optimize recursive loops", "A method to optimize `for` loops", "None of the above"], answer: 0 },
      { question: "How do JavaScript Promises differ from traditional callbacks?", options: ["Promises handle asynchronous tasks more cleanly, preventing callback hell", "Promises are faster", "Promises work synchronously", "Promises can only be used in Node.js"], answer: 0 },
      { question: "What is a WeakSet in JavaScript?", options: ["A set that allows garbage collection of its objects", "A set that does not allow duplicate values", "A set that stores only strings", "A set that stores only objects"], answer: 0 },
      { question: "What is the purpose of the `Reflect` object in JavaScript?", options: ["To provide methods for interceptable operations", "To copy arrays", "To store metadata", "To bind functions"], answer: 0 },
      { question: "How do you handle deep cloning of objects in JavaScript?", options: ["Using `JSON.parse` and `JSON.stringify`", "Using `Object.assign()`", "Using `Object.create()`", "Using `for...in` loops"], answer: 0 },
      { question: "What is the difference between `Object.seal()` and `Object.freeze()`?", options: ["`Object.freeze()` prevents any changes, `Object.seal()` prevents adding/removing properties but allows modification", "`Object.freeze()` only prevents adding properties, `Object.seal()` prevents any changes", "`Object.freeze()` and `Object.seal()` are identical", "`Object.seal()` is used for arrays, `Object.freeze()` is used for objects"], answer: 0 },
      { question: "What are async functions in JavaScript?", options: ["Functions that return a promise and allow `await`", "Functions that run asynchronously by default", "Functions that run without waiting", "None of the above"], answer: 0 },
      { question: "What is a Symbol in JavaScript?", options: ["A primitive data type used to create unique values", "A string wrapper", "A method for defining functions", "A special object"], answer: 0 },
      { question: "How does JavaScript's garbage collector work?", options: ["It uses mark-and-sweep to detect unreachable objects", "It clears memory manually", "It removes all unused variables", "It triggers when memory is full"], answer: 0 },
    ]
  },
  react: {
    easy: [
      { question: "What is React?", options: ["A CSS framework", "A JavaScript library for building user interfaces", "A database system", "A template engine"], answer: 1 },
      { question: "What is JSX in React?", options: ["A JavaScript function", "A CSS framework", "A syntax extension for JavaScript", "A type of API"], answer: 2 },
      { question: "How do you create a React component?", options: ["By using a class or a function", "By using an array", "By creating a variable", "By importing CSS files"], answer: 0 },
      { question: "What is the purpose of `state` in React?", options: ["To store and manage data in components", "To define styles", "To handle routing", "To make API calls"], answer: 0 },
      { question: "How do you pass data between components in React?", options: ["Using state", "Using functions", "Using props", "Using events"], answer: 2 },
      { question: "What is `props` in React?", options: ["Arguments passed into React components", "Functions that store state", "CSS classes", "References to DOM elements"], answer: 0 },
      { question: "What does the `useState` hook do?", options: ["Handles side effects", "Manages local component state", "Handles routing", "Fetches data from an API"], answer: 1 },
      { question: "What is a pure function in React?", options: ["A function that returns the same output given the same input", "A function that modifies component state", "A function that fetches data", "A function that handles events"], answer: 0 },
      { question: "What is the purpose of `setState` in React class components?", options: ["To update the state of the component", "To handle events", "To update the DOM", "To pass props"], answer: 0 },
      { question: "What is ReactDOM used for?", options: ["To render React components to the DOM", "To create React elements", "To manage React state", "To handle server-side rendering"], answer: 0 },
      { question: "What is the virtual DOM in React?", options: ["A lightweight copy of the real DOM", "A new type of DOM introduced in HTML5", "A tool for managing routing in React", "A server-side rendering tool"], answer: 0 },
      { question: "How do you handle events in React?", options: ["Using inline event handlers", "Using `addEventListener`", "Using synthetic events in JSX", "By creating event listeners manually"], answer: 2 },
      { question: "What is the purpose of `render()` method in React class components?", options: ["To define the UI of the component", "To fetch data", "To manage state", "To handle events"], answer: 0 },
      { question: "What does `componentDidMount()` lifecycle method do?", options: ["Executes after the component is rendered to the DOM", "Executes before the component is rendered", "Executes during the render process", "Executes when the component is removed"], answer: 0 },
      { question: "What is the purpose of `useEffect` hook in React?", options: ["Handles component side effects", "Handles component state", "Handles API calls", "Handles component rendering"], answer: 0 },
      { question: "How do you conditionally render a component in React?", options: ["Using `if` statements inside JSX", "Using ternary operators", "Using logical operators", "All of the above"], answer: 3 },
      { question: "What is `useRef` hook used for in React?", options: ["Accessing and modifying DOM elements", "Handling state updates", "Managing props", "Handling side effects"], answer: 0 },
      { question: "What is `useContext` hook used for in React?", options: ["Accessing context values without passing props", "Managing local state", "Managing global state", "Handling component side effects"], answer: 0 },
      { question: "How do you prevent re-renders in React components?", options: ["Using `shouldComponentUpdate` or `React.memo`", "Using `componentDidUpdate`", "Using `useEffect`", "Using `useState`"], answer: 0 },
    ],
    medium: [
      { question: "What is the difference between state and props in React?", options: ["State is immutable, props are mutable", "Props are for passing data between components, state is for managing local data", "State is for passing data, props manage local data", "Props can only be used in functional components"], answer: 1 },
      { question: "What are React hooks?", options: ["Functions that let you use state and other React features in functional components", "Classes that store data", "Tools for handling HTTP requests", "Methods for lifecycle management"], answer: 0 },
      { question: "What is the virtual DOM in React?", options: ["A copy of the real DOM that React uses to optimize rendering", "A new type of DOM", "A database", "A caching mechanism for JavaScript"], answer: 0 },
      { question: "What does `useReducer` hook do in React?", options: ["Manages complex state logic", "Manages side effects", "Renders components conditionally", "Handles API requests"], answer: 0 },
      { question: "What is the purpose of `React.memo`?", options: ["To optimize performance by memoizing components to prevent unnecessary re-renders", "To manage state more efficiently", "To handle asynchronous data", "To update component props"], answer: 0 },
      { question: "How do you handle errors in React components?", options: ["Using error boundaries", "Using try-catch blocks in JSX", "Using `useState`", "Using `useEffect`"], answer: 0 },
      { question: "What is React.Fragment used for?", options: ["To wrap multiple elements without adding extra nodes to the DOM", "To store state", "To handle routing", "To manage props"], answer: 0 },
      { question: "What is the difference between controlled and uncontrolled components in React?", options: ["Controlled components manage their own state, uncontrolled components rely on refs", "Controlled components rely on state, uncontrolled components rely on the DOM", "Uncontrolled components manage their own state, controlled components rely on refs", "There is no difference"], answer: 1 },
      { question: "What is `PropTypes` in React?", options: ["A way to type check props passed to a component", "A method to validate state", "A method to fetch API data", "A tool to manage global state"], answer: 0 },
      { question: "What is the purpose of keys in React lists?", options: ["To uniquely identify elements for efficient rendering", "To store state in lists", "To pass props between list elements", "To map elements to their index"], answer: 0 },
      { question: "How do you fetch data in React functional components?", options: ["Using the `useEffect` hook", "Using `componentDidMount`", "Using `componentWillMount`", "Using `useState`"], answer: 0 },
      { question: "What is `React.lazy()` used for?", options: ["Lazy loading components on demand", "Handling asynchronous events", "Managing state updates", "Optimizing API requests"], answer: 0 },
      { question: "How does React's context API work?", options: ["It allows you to pass data through the component tree without passing props manually at every level", "It optimizes performance", "It manages lifecycle methods", "It handles HTTP requests"], answer: 0 },
      { question: "How does `useCallback` improve performance in React?", options: ["It memoizes a function to prevent unnecessary re-creations between renders", "It handles side effects", "It manages complex state", "It caches component data"], answer: 0 },
      { question: "What is the purpose of `useLayoutEffect` in React?", options: ["It fires synchronously after all DOM mutations", "It fires asynchronously after all side effects", "It handles data fetching", "It manages props"], answer: 0 },
      { question: "What are React portals?", options: ["A way to render children into a DOM node that exists outside the DOM hierarchy of the parent component", "A method to handle routing", "A way to create a new component", "A feature to optimize performance"], answer: 0 },
      { question: "What is `reconciliation` in React?", options: ["The process React uses to update the DOM efficiently", "The process of merging state and props", "A method for managing lifecycle events", "A tool for server-side rendering"], answer: 0 },
      { question: "What is `code-splitting` in React?", options: ["A way to split the code into smaller bundles, which can be loaded on demand", "A method to split components into reusable parts", "A way to optimize component rendering", "A technique to split state updates"], answer: 0 },
      { question: "How do React hooks differ from lifecycle methods?", options: ["Hooks are used in functional components, lifecycle methods are used in class components", "Hooks are synchronous, lifecycle methods are asynchronous", "Hooks handle events, lifecycle methods handle state", "There is no difference"], answer: 0 },
      { question: "What is React suspense?", options: ["A feature to handle asynchronous rendering", "A method to delay state updates", "A tool to manage events", "A way to fetch API data"], answer: 0 },
    ],
    hard: [
      { question: "What is reconciliation in React?", options: ["A method to reset the state", "A process that React uses to update the DOM", "A way to merge component data", "A lifecycle method"], answer: 1 },
      { question: "What is code splitting in React?", options: ["A way to divide functions", "A method to load components on demand", "A way to handle API requests", "A process to optimize CSS"], answer: 1 },
      { question: "How do React context and hooks work together?", options: ["Using hooks to access and update context data", "Hooks provide context automatically", "They cannot be used together", "Context initializes hooks"], answer: 0 },
      { question: "What is `useMemo` in React?", options: ["A hook to optimize performance by memoizing expensive calculations", "A way to handle state changes", "A lifecycle method", "A method to handle user input"], answer: 0 },
      { question: "How does React’s `key` attribute help in rendering lists?", options: ["It helps identify elements uniquely to update the DOM efficiently", "It assigns event handlers", "It controls state changes", "It manages styles"], answer: 0 },
      { question: "What is `Redux` and how does it relate to React?", options: ["A state management library often used with React to manage application state", "A routing library for React", "A method for handling lifecycle events", "A tool for optimizing React components"], answer: 0 },
      { question: "What is server-side rendering (SSR) in React?", options: ["A technique to render React components on the server and send fully rendered HTML to the client", "A way to fetch data from an API", "A tool for managing React state", "A feature that renders components without JavaScript"], answer: 0 },
      { question: "What is the difference between `useReducer` and `useState`?", options: ["`useReducer` is for managing complex state logic, `useState` is for simple state management", "`useReducer` is for managing side effects", "`useState` handles arrays only", "`useReducer` handles state changes asynchronously"], answer: 0 },
      { question: "How do you optimize a React application for performance?", options: ["Using `React.memo`, `useMemo`, and `useCallback` to avoid unnecessary renders", "Using the virtual DOM", "Using `useEffect` for everything", "Using functional components only"], answer: 0 },
      { question: "What is the difference between `componentWillMount` and `componentDidMount`?", options: ["`componentWillMount` executes before the component is mounted, `componentDidMount` executes after the component is mounted", "`componentWillMount` handles state, `componentDidMount` handles props", "`componentWillMount` runs asynchronously, `componentDidMount` runs synchronously", "There is no difference"], answer: 0 },
      { question: "What is `forwardRef` in React?", options: ["A way to pass refs to child components", "A method for managing state", "A tool for handling events", "A way to manage routing"], answer: 0 },
      { question: "What is the difference between client-side rendering (CSR) and server-side rendering (SSR)?", options: ["CSR renders components on the client, SSR renders components on the server", "SSR is faster than CSR", "CSR renders components asynchronously, SSR does not", "There is no difference"], answer: 0 },
      { question: "What is the role of `getDerivedStateFromProps` in React?", options: ["It updates state based on props changes before a component is re-rendered", "It handles state updates asynchronously", "It manages component lifecycle events", "It handles event listeners"], answer: 0 },
      { question: "How does React handle updates to deeply nested state?", options: ["You must create a copy of the state object and update it immutably", "React automatically updates deeply nested objects", "You can directly modify nested objects", "You must use Redux for deep state updates"], answer: 0 },
      { question: "What is the purpose of the `useImperativeHandle` hook?", options: ["To customize the instance value that is exposed to parent components when using `ref`", "To handle lifecycle methods", "To optimize performance", "To fetch API data"], answer: 0 },
      { question: "What is `ReactDOMServer` used for?", options: ["To render React components on the server", "To manage global state", "To handle routing", "To optimize performance"], answer: 0 },
      { question: "What is `shouldComponentUpdate` lifecycle method used for?", options: ["To control whether a component should re-render or not", "To handle side effects", "To fetch API data", "To update component state"], answer: 0 },
      { question: "What is the purpose of `useDeferredValue` in React?", options: ["To allow rendering of lower priority updates while deferring higher priority ones", "To defer state updates", "To defer component rendering", "To manage side effects"], answer: 0 },
      { question: "How does React's `StrictMode` help in development?", options: ["It identifies potential issues in an application by intentionally double-invoking certain methods", "It optimizes performance", "It handles state updates more efficiently", "It fetches API data"], answer: 0 },
      { question: "What are higher-order components (HOC) in React?", options: ["Functions that take a component and return a new component with additional props or logic", "A method to handle component lifecycle", "A tool for managing state", "A way to handle event listeners"], answer: 0 },
    ]
  },
  typescript: {
    easy: [
      { question: "What is TypeScript?", options: ["A superset of JavaScript", "A new programming language", "A template engine", "A database system"], answer: 0 },
      { question: "What does TypeScript add to JavaScript?", options: ["Static typing", "CSS", "HTML templates", "Database querying"], answer: 0 },
      { question: "Which file extension is used for TypeScript files?", options: [".ts", ".js", ".jsx", ".html"], answer: 0 },
      { question: "How do you declare a variable with a type in TypeScript?", options: ["let x: number", "let x = 5", "let x: any", "var x: string"], answer: 0 },
      { question: "Which command compiles TypeScript into JavaScript?", options: ["tsc", "npm build", "tsbuild", "compile"], answer: 0 },
      { question: "What is the type of `null` in TypeScript?", options: ["null", "undefined", "object", "string"], answer: 2 },
      { question: "What is the default type for variables in TypeScript if no type is explicitly provided?", options: ["any", "string", "number", "undefined"], answer: 0 },
      { question: "What is the purpose of `interface` in TypeScript?", options: ["To define a contract for objects", "To create variables", "To manage DOM elements", "To style components"], answer: 0 },
      { question: "Which of the following types is a union type?", options: ["number | string", "number & string", "any", "boolean"], answer: 0 },
      { question: "How do you mark a property as optional in an interface?", options: ["Using a `?` after the property name", "Using the `optional` keyword", "Leaving it undefined", "Assigning it a default value"], answer: 0 },
      { question: "What does the `readonly` modifier do in TypeScript?", options: ["Prevents a property from being changed", "Hides a property from objects", "Makes a property optional", "Converts a number to a string"], answer: 0 },
      { question: "What is the type for an array of numbers in TypeScript?", options: ["number[]", "string[]", "Array<number>", "Both `number[]` and `Array<number>`"], answer: 3 },
      { question: "How do you handle unknown data types in TypeScript?", options: ["Using the `unknown` type", "Using the `any` type", "Using the `void` type", "Using the `never` type"], answer: 0 },
      { question: "What is `enum` used for in TypeScript?", options: ["To define a set of named constants", "To create classes", "To declare arrays", "To handle promises"], answer: 0 },
      { question: "What is a tuple in TypeScript?", options: ["An array with fixed number and types of elements", "A function", "A type of class", "A promise"], answer: 0 },
      { question: "How do you define a function's return type in TypeScript?", options: ["After the parameters with `: type`", "Before the function name", "Inside the function body", "Using a `return` keyword"], answer: 0 },
      { question: "What is the difference between `type` and `interface` in TypeScript?", options: ["`interface` is more suited for objects, `type` for all types", "`type` is only for primitives", "`type` and `interface` are interchangeable", "There is no difference"], answer: 0 },
      { question: "What is `void` used for in TypeScript?", options: ["To denote a function with no return value", "To define a string", "To define an empty array", "To mark a property as undefined"], answer: 0 },
      { question: "What is `strictNullChecks` in TypeScript?", options: ["A flag that ensures null and undefined are handled explicitly", "A type to enforce strict types", "A function that handles null values", "A method to convert null to undefined"], answer: 0 },
    ],
    medium: [
      { question: "What is the difference between `any` and `unknown` in TypeScript?", options: ["`unknown` is safer than `any` because it requires type-checking before usage", "`any` is used for numbers, `unknown` for strings", "`any` can only be used in classes", "`unknown` is used for arrays"], answer: 0 },
      { question: "What is type inference in TypeScript?", options: ["The ability of TypeScript to infer types when they are not explicitly declared", "Assigning a type to a variable explicitly", "Inferring function return values", "Inferring the types of functions in JavaScript"], answer: 0 },
      { question: "How do you define an array of objects in TypeScript?", options: ["Array<{key: value}>", "{object[]}", "Array<any>", "Array<Object>"], answer: 0 },
      { question: "What is the `never` type in TypeScript?", options: ["A type that represents values that never occur", "A type that represents numbers", "A type that represents strings", "A type that represents undefined values"], answer: 0 },
      { question: "How do you handle function overloading in TypeScript?", options: ["By declaring multiple function signatures", "By using `interface`", "By using `enum`", "By using `abstract`"], answer: 0 },
      { question: "What does the `Partial` utility type do?", options: ["Makes all properties of a type optional", "Removes properties from a type", "Makes all properties required", "Merges two types together"], answer: 0 },
      { question: "What is the difference between `type` and `interface` when extending?", options: ["`interface` can be merged, `type` cannot", "`type` can be merged, `interface` cannot", "`type` cannot extend another type", "`interface` cannot extend another interface"], answer: 0 },
      { question: "How do you define a union type in TypeScript?", options: ["Using `|` to combine multiple types", "Using `&` to combine multiple types", "Using `?` for optional types", "Using `:` for type assertion"], answer: 0 },
      { question: "What is `typeof` used for in TypeScript?", options: ["To extract the type of a variable", "To compare types", "To convert values to another type", "To check for undefined variables"], answer: 0 },
      { question: "How do you cast a value to a specific type in TypeScript?", options: ["Using type assertions like `as`", "Using `typeof`", "Using `instanceof`", "Using the `new` keyword"], answer: 0 },
      { question: "What is a mapped type in TypeScript?", options: ["A type that allows you to create new types by transforming properties", "A method to transform arrays", "A tool for state management", "A method to map function calls"], answer: 0 },
      { question: "What is `keyof` in TypeScript?", options: ["A keyword that returns a union of keys of an object", "A method to return object values", "A tool for looping through object keys", "A function to access object properties"], answer: 0 },
      { question: "What is `readonly` used for in TypeScript?", options: ["To prevent reassignment of properties", "To prevent object creation", "To handle functions", "To manage state"], answer: 0 },
      { question: "What is the purpose of the `Record` utility type?", options: ["It constructs a type with a set of properties of a specified type", "It constructs a function", "It creates a new array", "It handles API requests"], answer: 0 },
      { question: "What is the difference between `abstract` classes and interfaces in TypeScript?", options: ["`abstract` classes can have implementation, interfaces cannot", "Interfaces have implementations, `abstract` classes do not", "`abstract` classes cannot be extended", "Interfaces cannot be used with objects"], answer: 0 },
      { question: "What is a discriminated union in TypeScript?", options: ["A union type with a common property used to distinguish between variants", "A function to merge types", "A method to remove types", "A tool for object inheritance"], answer: 0 },
      { question: "How do you handle `null` and `undefined` values in TypeScript?", options: ["Using `null` or `undefined` types and `strictNullChecks`", "Using `void`", "Using `unknown`", "Using `readonly`"], answer: 0 },
      { question: "What is the purpose of the `Pick` utility type in TypeScript?", options: ["It creates a new type by selecting a subset of properties from another type", "It picks elements from arrays", "It creates new functions", "It returns a subset of values from an object"], answer: 0 },
      { question: "How do you create a generic function in TypeScript?", options: ["By using `<T>` as a placeholder type", "By using `typeof`", "By using `new`", "By using `interface`"], answer: 0 },
    ],
    hard: [
      { question: "What is a type guard in TypeScript?", options: ["A function or condition that narrows the type within a conditional block", "A function that converts types", "A method to return object keys", "A tool for type inheritance"], answer: 0 },
      { question: "What is the `Exclude` utility type used for?", options: ["To exclude specific types from a union", "To exclude properties from an object", "To exclude array elements", "To exclude function return values"], answer: 0 },
      { question: "What is the difference between `extends` and `implements` in TypeScript?", options: ["`extends` is used to inherit from classes or interfaces, `implements` is used to implement interfaces", "`extends` is used with interfaces, `implements` is used with classes", "`extends` cannot be used with classes", "There is no difference"], answer: 0 },
      { question: "What is the `infer` keyword used for in TypeScript?", options: ["To infer types within conditional types", "To handle promises", "To fetch API data", "To define types"], answer: 0 },
      { question: "What is the `ReturnType` utility type?", options: ["It infers the return type of a function", "It infers the parameter type", "It infers the `this` context", "It returns a string type"], answer: 0 },
      { question: "What is the purpose of the `Parameters` utility type?", options: ["To extract the parameter types of a function as a tuple", "To extract the return type of a function", "To modify function arguments", "To enforce function types"], answer: 0 },
      { question: "How do you narrow a union type in TypeScript?", options: ["Using type guards, like `typeof` or `instanceof`", "Using `void`", "Using `never`", "Using `extends`"], answer: 0 },
      { question: "What is a conditional type in TypeScript?", options: ["A type that checks for a condition and returns one type or another", "A type that depends on object values", "A tool for managing state", "A type that depends on functions"], answer: 0 },
      { question: "What is the purpose of `Partial<T>` in TypeScript?", options: ["It makes all properties in a type optional", "It removes all properties from a type", "It converts all properties to readonly", "It handles array methods"], answer: 0 },
      { question: "What is the purpose of `NonNullable<T>` in TypeScript?", options: ["It removes `null` and `undefined` from a type", "It adds `null` to a type", "It merges two types", "It handles string types"], answer: 0 },
      { question: "What is the `Omit` utility type used for?", options: ["It constructs a type by picking all properties from a type and then removing some", "It creates an array from object keys", "It merges two objects", "It converts strings to numbers"], answer: 0 },
      { question: "What is the purpose of `Extract<T, U>` in TypeScript?", options: ["It extracts types that are assignable to `U` from `T`", "It removes properties from an object", "It extracts functions from an object", "It extracts keys from an array"], answer: 0 },
      { question: "What is the purpose of `Mapped Types` in TypeScript?", options: ["To transform types by iterating over properties of a given type", "To modify arrays", "To handle promises", "To infer return values"], answer: 0 },
      { question: "What is the difference between `unknown` and `any`?", options: ["`unknown` is safer as it requires explicit type checking", "`any` is used for strings", "`unknown` can be used in functions", "There is no difference"], answer: 0 },
      { question: "What is the purpose of the `Record<K, T>` utility type?", options: ["To create an object type with keys of type `K` and values of type `T`", "To convert types to arrays", "To modify object keys", "To extract values from objects"], answer: 0 },
      { question: "What is a discriminated union?", options: ["A union type where all members share a common property to distinguish between them", "A function that merges types", "A method to compare objects", "A feature that handles exceptions"], answer: 0 },
      { question: "How do you combine multiple interfaces in TypeScript?", options: ["Using the `&` operator", "Using the `|` operator", "Using the `+` operator", "Using the `,` operator"], answer: 0 },
      { question: "What is `Type Assertion` in TypeScript?", options: ["A way to tell the compiler to treat a value as a certain type", "A method for narrowing types", "A tool to define arrays", "A method for handling errors"], answer: 0 },
      { question: "How do you create a custom generic type in TypeScript?", options: ["Using `<T>` as a placeholder for the type", "Using `typeof`", "Using `this`", "Using `enum`"], answer: 0 },
    ]
  },
  reactNative: {
    easy: [
      { question: "What is React Native?", options: ["A framework for building mobile apps using JavaScript", "A CSS framework", "A template engine for websites", "A back-end server"], answer: 0 },
      { question: "Which language is primarily used to write React Native apps?", options: ["JavaScript", "Python", "Ruby", "Java"], answer: 0 },
      { question: "How do you create a basic React Native component?", options: ["Using a function or class", "Using an HTML template", "Using a CSS class", "Using the Android SDK"], answer: 0 },
      { question: "What does the `<View>` component represent in React Native?", options: ["A container for other components", "An input field", "A button", "A text field"], answer: 0 },
      { question: "How do you display text in a React Native app?", options: ["Using the `<Text>` component", "Using the `<div>` component", "Using the `<Input>` component", "Using the `<p>` component"], answer: 0 },
      { question: "What is the purpose of `StyleSheet` in React Native?", options: ["To define styles for components", "To handle animations", "To manage state", "To handle navigation"], answer: 0 },
      { question: "What is the equivalent of HTML `<div>` in React Native?", options: ["<View>", "<Text>", "<ScrollView>", "<Button>"], answer: 0 },
      { question: "What command do you use to start a new React Native project?", options: ["npx react-native init", "npm create-react-native-app", "npx create-react-app", "npm init"], answer: 0 },
      { question: "How do you handle touch events in React Native?", options: ["Using the `<TouchableOpacity>` or `<TouchableHighlight>` component", "Using the `<Click>` component", "Using `onClick`", "Using `onTouch`"], answer: 0 },
      { question: "What is the purpose of the `<Image>` component in React Native?", options: ["To display images in the app", "To handle animations", "To add text fields", "To handle form submissions"], answer: 0 },
      { question: "Which platform can React Native target?", options: ["iOS and Android", "Windows and Mac", "Linux and Unix", "Chrome OS"], answer: 0 },
      { question: "How do you navigate between screens in a React Native app?", options: ["Using a navigation library like `react-navigation`", "Using `window.location.href`", "Using `onClick` events", "Using a form submission"], answer: 0 },
      { question: "Which component would you use for scrollable content?", options: ["<ScrollView>", "<View>", "<Button>", "<TouchableOpacity>"], answer: 0 },
      { question: "What is the purpose of the `<FlatList>` component?", options: ["To render a list of data efficiently", "To add buttons", "To create static forms", "To handle navigation"], answer: 0 },
      { question: "How do you handle platform-specific code in React Native?", options: ["Using `Platform.OS` to check if the platform is iOS or Android", "Using `window.location`", "Using `if` statements", "Using `onClick`"], answer: 0 },
      { question: "What is the purpose of `expo` in React Native?", options: ["A toolchain for building React Native apps without native code", "A component library", "A CSS framework", "A server-side tool"], answer: 0 },
      { question: "How do you create animations in React Native?", options: ["Using the `Animated` API", "Using CSS animations", "Using jQuery", "Using `onClick` events"], answer: 0 },
      { question: "What is the primary thread in React Native called?", options: ["The JavaScript thread", "The UI thread", "The main thread", "The rendering thread"], answer: 0 },
      { question: "How do you handle form inputs in React Native?", options: ["Using the `<TextInput>` component", "Using the `<Form>` component", "Using the `<View>` component", "Using the `<InputField>` component"], answer: 0 },
    ],
    medium: [
      { question: "What is the difference between `<FlatList>` and `<ScrollView>` in React Native?", options: ["`<FlatList>` is optimized for large lists, `<ScrollView>` renders all items at once", "`<FlatList>` is only for Android, `<ScrollView>` is for iOS", "`<ScrollView>` is faster", "`<FlatList>` cannot handle touch events"], answer: 0 },
      { question: "What is the purpose of `useEffect` in React Native functional components?", options: ["To handle side effects like data fetching or subscriptions", "To handle form inputs", "To create event listeners", "To handle animations"], answer: 0 },
      { question: "How do you add navigation between screens in React Native?", options: ["Using a library like `react-navigation`", "Using `window.location`", "Using `<a>` tags", "Using `onClick` handlers"], answer: 0 },
      { question: "What is the purpose of `AsyncStorage` in React Native?", options: ["To store data locally on the device", "To store CSS styles", "To handle network requests", "To manage app state"], answer: 0 },
      { question: "How do you handle platform-specific styling in React Native?", options: ["Using `Platform.select()`", "Using `window.location.href`", "Using `useEffect`", "Using `style` tags"], answer: 0 },
      { question: "What is `Expo` in React Native?", options: ["A toolchain for building React Native apps without native code", "A state management library", "A CSS framework", "A back-end server"], answer: 0 },
      { question: "How do you implement push notifications in a React Native app?", options: ["Using libraries like `react-native-push-notification` or `Expo Notifications`", "Using CSS", "Using `alert()`", "Using a form submission"], answer: 0 },
      { question: "What is the difference between `TouchableOpacity` and `TouchableHighlight`?", options: ["`TouchableOpacity` changes opacity on press, `TouchableHighlight` adds a highlight background", "`TouchableOpacity` is faster", "`TouchableHighlight` only works on Android", "`TouchableOpacity` is used for buttons"], answer: 0 },
      { question: "What is the purpose of the `useState` hook in React Native?", options: ["To manage local component state", "To handle API requests", "To manage side effects", "To handle navigation"], answer: 0 },
      { question: "What is the primary purpose of `NativeModules` in React Native?", options: ["To access native platform APIs", "To handle navigation", "To create components", "To add styles"], answer: 0 },
      { question: "How do you manage global state in a React Native app?", options: ["Using libraries like `Redux` or `React Context`", "Using local variables", "Using the `useEffect` hook", "Using `AsyncStorage`"], answer: 0 },
      { question: "What is `react-native-gesture-handler` used for?", options: ["To handle gestures like swipes, taps, and pans", "To manage API calls", "To handle animations", "To style components"], answer: 0 },
      { question: "How do you check the platform in React Native (iOS or Android)?", options: ["Using `Platform.OS`", "Using `window.location`", "Using `useState`", "Using `StyleSheet.create()`"], answer: 0 },
      { question: "How do you debug a React Native app?", options: ["Using the React Native Debugger or Chrome DevTools", "Using `console.log()` only", "Using jQuery Debugger", "Using Node.js DevTools"], answer: 0 },
      { question: "What is the purpose of the `<SectionList>` component?", options: ["To render a sectioned list of data", "To create scrollable forms", "To handle touch events", "To manage animations"], answer: 0 },
      { question: "What is `Fast Refresh` in React Native?", options: ["A feature that reloads your app quickly while preserving state", "A tool to refresh the server", "A way to refresh styles", "A method for handling API requests"], answer: 0 },
      { question: "What does `react-native-reanimated` provide?", options: ["An API for handling animations with better performance", "An API for data fetching", "A tool for native navigation", "A state management library"], answer: 0 },
      { question: "What is the purpose of the `<Modal>` component in React Native?", options: ["To create modal views that overlay on the screen", "To manage routing", "To handle side effects", "To add styles to components"], answer: 0 },
      { question: "What is the purpose of the `KeyboardAvoidingView` component?", options: ["To move views out of the way when the keyboard appears", "To hide the keyboard", "To handle input validation", "To manage API requests"], answer: 0 },
    ],
    hard: [
      { question: "What is the `bridge` in React Native?", options: ["A mechanism that facilitates communication between JavaScript and native modules", "A way to manage state", "A CSS tool", "A network handler"], answer: 0 },
      { question: "What is the difference between `StyleSheet.create()` and inline styles in React Native?", options: ["`StyleSheet.create()` improves performance by reducing the recalculation of styles", "`StyleSheet.create()` is only used for complex layouts", "Inline styles are faster", "There is no difference"], answer: 0 },
      { question: "What is the purpose of `Hermes` in React Native?", options: ["An open-source JavaScript engine optimized for React Native on Android", "A CSS framework", "A navigation library", "A back-end server"], answer: 0 },
      { question: "What is `React Navigation` in React Native?", options: ["A popular library for managing navigation in React Native apps", "A tool for debugging apps", "A CSS utility", "A state management library"], answer: 0 },
      { question: "How do you optimize the performance of a React Native app?", options: ["By using `FlatList` for large data sets, minimizing re-renders, and optimizing images", "By using more components", "By reducing API calls", "By avoiding animations"], answer: 0 },
      { question: "What are `native modules` in React Native?", options: ["Modules that allow JavaScript code to interact with native iOS/Android code", "Modules that handle state", "Modules that handle animations", "Modules that manage routing"], answer: 0 },
      { question: "What is the difference between `Expo` and `React Native CLI`?", options: ["`Expo` provides a managed workflow with easier setup but limited native code, while `React Native CLI` offers full control over native code", "`Expo` is faster", "`Expo` is only for Android apps", "`React Native CLI` is for React web apps"], answer: 0 },
      { question: "How do you implement deep linking in a React Native app?", options: ["Using libraries like `react-navigation` with deep linking support", "Using `window.location`", "Using `onClick` events", "Using a form submission"], answer: 0 },
      { question: "What is `react-native-splash-screen` used for?", options: ["To display a splash screen when the app loads", "To handle touch events", "To fetch API data", "To manage navigation"], answer: 0 },
      { question: "How does the `VirtualizedList` component differ from `FlatList` in React Native?", options: ["`VirtualizedList` provides more control over rendering large lists, but requires more configuration", "`FlatList` is faster", "`FlatList` supports more types of data", "`VirtualizedList` is used for animations"], answer: 0 },
      { question: "What is `Metro` in React Native?", options: ["A JavaScript bundler used to compile and bundle React Native apps", "A CSS framework", "A navigation tool", "A back-end server"], answer: 0 },
      { question: "What is the purpose of `useNativeDriver` in React Native animations?", options: ["It enables animations to run on the native thread, improving performance", "It handles state", "It manages touch events", "It optimizes API calls"], answer: 0 },
      { question: "How does `react-native-firebase` integrate with React Native apps?", options: ["It provides Firebase services like authentication, database, and push notifications for React Native apps", "It handles animations", "It manages local state", "It is a routing library"], answer: 0 },
      { question: "What is the purpose of `react-native-vector-icons`?", options: ["A library to include custom icons in React Native apps", "A tool for navigation", "A tool for performance optimization", "A CSS framework"], answer: 0 },
      { question: "How do you implement biometric authentication in React Native?", options: ["Using libraries like `react-native-touch-id` or `expo-local-authentication`", "Using `onClick` events", "Using `window.location`", "Using a splash screen"], answer: 0 },
      { question: "What is the purpose of the `react-native-linear-gradient` library?", options: ["To add linear gradient backgrounds in React Native components", "To fetch data from APIs", "To manage state", "To handle touch events"], answer: 0 },
      { question: "How do you handle background tasks in React Native?", options: ["Using libraries like `react-native-background-fetch`", "Using `useState`", "Using `useEffect`", "Using `window.location`"], answer: 0 },
      { question: "What is the difference between `Expo` Managed Workflow and Bare Workflow?", options: ["The Managed Workflow handles most configurations automatically, while the Bare Workflow gives full control over native code", "Bare Workflow is faster", "Managed Workflow only works on iOS", "Bare Workflow is only for web apps"], answer: 0 },
      { question: "How does React Native handle gestures?", options: ["Using libraries like `react-native-gesture-handler`", "Using inline styles", "Using `onClick` handlers", "Using a native module"], answer: 0 },
      { question: "What is `lottie-react-native` used for?", options: ["To add animations using Lottie files in React Native apps", "To handle navigation", "To manage app state", "To fetch API data"], answer: 0 },
    ]
  },
  gitGithub: {
    easy: [
      { question: "What is Git?", options: ["A distributed version control system", "A cloud storage service", "A programming language", "A web development tool"], answer: 0 },
      { question: "What is GitHub?", options: ["A web-based platform for hosting Git repositories", "A code editor", "A web browser", "A Linux distribution"], answer: 0 },
      { question: "Which command is used to initialize a new Git repository?", options: ["git init", "git start", "git new", "git create"], answer: 0 },
      { question: "What does `git status` do?", options: ["Shows the state of the working directory and the staging area", "Commits the changes", "Creates a new branch", "Merges two branches"], answer: 0 },
      { question: "Which command is used to add changes to the staging area?", options: ["git add", "git commit", "git push", "git branch"], answer: 0 },
      { question: "What is the purpose of `git commit`?", options: ["To save changes to the local repository", "To upload changes to GitHub", "To switch branches", "To create a new branch"], answer: 0 },
      { question: "What does `git clone` do?", options: ["Creates a local copy of a remote repository", "Creates a new repository", "Pushes changes to a remote repository", "Deletes a repository"], answer: 0 },
      { question: "Which command is used to upload changes to a remote repository?", options: ["git push", "git pull", "git fetch", "git commit"], answer: 0 },
      { question: "What does `git pull` do?", options: ["Fetches and merges changes from a remote repository", "Deletes a branch", "Pushes changes to a remote repository", "Creates a new commit"], answer: 0 },
      { question: "How do you check the commit history in Git?", options: ["git log", "git history", "git commit", "git revert"], answer: 0 },
      { question: "What is a branch in Git?", options: ["A parallel version of a repository", "A single file", "A code editor", "A pull request"], answer: 0 },
      { question: "What does `git checkout` do?", options: ["Switches to a different branch", "Commits changes", "Creates a new repository", "Pushes changes to GitHub"], answer: 0 },
      { question: "How do you create a new branch in Git?", options: ["git branch branch-name", "git new branch", "git init branch", "git switch branch"], answer: 0 },
      { question: "Which command is used to merge branches in Git?", options: ["git merge", "git add", "git pull", "git commit"], answer: 0 },
      { question: "What is a remote repository?", options: ["A version of a repository hosted on a server like GitHub", "A backup copy of the repository", "A branch in a repository", "A local copy of a repository"], answer: 0 },
      { question: "What is the `.gitignore` file used for?", options: ["To specify which files or directories Git should ignore", "To commit changes to the repository", "To track changes in the repository", "To delete files from the repository"], answer: 0 },
      { question: "What does `git diff` do?", options: ["Shows the differences between commits, branches, or files", "Shows the commit history", "Merges branches", "Deletes a branch"], answer: 0 },
      { question: "How do you view details of a specific commit in Git?", options: ["git show commit-hash", "git commit", "git log", "git revert"], answer: 0 },
      { question: "What does `git fetch` do?", options: ["Retrieves changes from a remote repository without merging", "Pushes changes to a remote repository", "Creates a new branch", "Commits changes to the repository"], answer: 0 },
    ],
    medium: [
      { question: "What is a fast-forward merge in Git?", options: ["A type of merge where the branch pointer simply moves forward to the new commit", "A merge that happens automatically", "A merge that rewrites history", "A merge that creates a conflict"], answer: 0 },
      { question: "What is a rebase in Git?", options: ["A process to move or combine a sequence of commits", "A method to create new branches", "A way to resolve merge conflicts", "A command to delete branches"], answer: 0 },
      { question: "How do you resolve merge conflicts in Git?", options: ["By manually editing the conflicting files and committing the changes", "By using `git revert`", "By deleting the branch", "By pushing changes to GitHub"], answer: 0 },
      { question: "What does `git stash` do?", options: ["Temporarily saves changes without committing", "Commits changes", "Creates a new branch", "Deletes uncommitted changes"], answer: 0 },
      { question: "What is the purpose of `git tag`?", options: ["To mark specific commits as important releases", "To create new branches", "To delete branches", "To switch between branches"], answer: 0 },
      { question: "What is the difference between `git merge` and `git rebase`?", options: ["`git merge` creates a merge commit, `git rebase` applies changes linearly on top of another branch", "`git merge` deletes the branch, `git rebase` preserves it", "`git merge` is faster", "`git rebase` creates a merge commit"], answer: 0 },
      { question: "How do you delete a local branch in Git?", options: ["git branch -d branch-name", "git delete branch-name", "git remove branch-name", "git push -d branch-name"], answer: 0 },
      { question: "How do you delete a remote branch in Git?", options: ["git push origin --delete branch-name", "git branch -d branch-name", "git revert branch-name", "git remove branch-name"], answer: 0 },
      { question: "What is `git cherry-pick` used for?", options: ["To apply a specific commit from one branch to another", "To delete commits", "To merge branches", "To push changes to a remote repository"], answer: 0 },
      { question: "What is the purpose of `git reset`?", options: ["To undo changes by moving the HEAD pointer and discarding changes", "To merge branches", "To delete the repository", "To commit changes"], answer: 0 },
      { question: "What is the difference between `git reset` and `git revert`?", options: ["`git reset` moves the HEAD pointer and discards changes, `git revert` creates a new commit that undoes a previous commit", "`git reset` is used for merges, `git revert` is used for deletions", "`git reset` is for creating branches, `git revert` is for undoing changes", "There is no difference"], answer: 0 },
      { question: "How do you undo the last commit in Git without losing the changes?", options: ["git reset --soft HEAD~1", "git revert HEAD", "git pull", "git stash"], answer: 0 },
      { question: "What does `git remote -v` show?", options: ["The URLs of the remote repositories associated with the local repository", "The commit history", "The current branch", "The list of files in the repository"], answer: 0 },
      { question: "How do you rename a local branch in Git?", options: ["git branch -m old-name new-name", "git rename branch-name", "git reset branch-name", "git commit branch-name"], answer: 0 },
      { question: "What is `git blame` used for?", options: ["To show who made changes to each line of a file", "To delete a branch", "To revert a commit", "To merge branches"], answer: 0 },
      { question: "How do you revert a specific commit in Git?", options: ["git revert commit-hash", "git reset commit-hash", "git cherry-pick commit-hash", "git pull commit-hash"], answer: 0 },
      { question: "What is the difference between `git fetch` and `git pull`?", options: ["`git fetch` downloads changes without merging, `git pull` downloads and merges changes", "`git fetch` creates a branch, `git pull` deletes a branch", "`git fetch` commits changes, `git pull` reverts changes", "`git fetch` creates merge conflicts, `git pull` avoids them"], answer: 0 },
      { question: "What is the purpose of a pull request in GitHub?", options: ["To propose changes to a repository and request that they be merged", "To create a new branch", "To commit changes to the main branch", "To delete branches"], answer: 0 },
      { question: "How do you squash commits in Git?", options: ["By using `git rebase -i` to combine multiple commits into one", "By using `git merge`", "By using `git reset`", "By using `git stash`"], answer: 0 },
    ],
    hard: [
      { question: "What is the difference between `git rebase` and `git merge` in terms of commit history?", options: ["`git rebase` rewrites commit history to make it linear, while `git merge` preserves the commit history with merge commits", "`git merge` deletes the commit history", "`git rebase` creates merge commits", "`git merge` rewrites commit history"], answer: 0 },
      { question: "What does the `--squash` option do when merging branches in Git?", options: ["It combines all changes from the branch into a single commit", "It deletes the branch after merging", "It creates a new branch", "It creates multiple commits for each change"], answer: 0 },
      { question: "What is a detached HEAD state in Git?", options: ["A state where the HEAD points to a specific commit instead of a branch", "A state where the branch is deleted", "A state where a commit is reverted", "A state where a branch is merged"], answer: 0 },
      { question: "What is the difference between `git reset --soft` and `git reset --hard`?", options: ["`--soft` keeps changes in the staging area, `--hard` discards changes completely", "`--soft` deletes the commit, `--hard` merges branches", "`--soft` is for merging, `--hard` is for deleting branches", "`--soft` is for reverts, `--hard` is for commits"], answer: 0 },
      { question: "What is the purpose of `git reflog`?", options: ["To view the history of all actions, including those not in the commit history", "To merge branches", "To delete commits", "To revert changes"], answer: 0 },
      { question: "What is a bare repository in Git?", options: ["A repository that does not have a working directory and is used for collaboration", "A repository without branches", "A repository without commits", "A repository without a `.git` folder"], answer: 0 },
      { question: "What is the difference between `git revert` and `git reset --hard`?", options: ["`git revert` creates a new commit to undo changes, `git reset --hard` rewrites the commit history", "`git revert` deletes the branch, `git reset --hard` merges branches", "`git revert` creates a merge commit, `git reset --hard` preserves history", "There is no difference"], answer: 0 },
      { question: "How do you configure a Git repository to ignore file mode changes?", options: ["git config core.fileMode false", "git init", "git reset", "git pull"], answer: 0 },
      { question: "What is a submodule in Git?", options: ["A repository embedded inside another repository", "A branch of a repository", "A folder inside a repository", "A feature to squash commits"], answer: 0 },
      { question: "What is `git bisect` used for?", options: ["To find the commit that introduced a bug by performing a binary search", "To squash commits", "To revert changes", "To merge branches"], answer: 0 },
      { question: "What does `git gc` do?", options: ["Cleans up unnecessary files and optimizes the local repository", "Commits changes", "Pushes changes to GitHub", "Deletes a branch"], answer: 0 },
      { question: "How do you configure Git to remember your username and password for HTTPS?", options: ["git config credential.helper cache", "git init", "git pull", "git commit"], answer: 0 },
      { question: "What does the `git diff --cached` command do?", options: ["Shows the changes that are staged for the next commit", "Shows the differences between two branches", "Shows the commit history", "Shows the current branch"], answer: 0 },
      { question: "What does `git filter-branch` do?", options: ["Rewrites history for all branches in a Git repository", "Merges branches", "Deletes a branch", "Pushes changes to GitHub"], answer: 0 },
      { question: "What is the purpose of `git fsck`?", options: ["Verifies the integrity of the Git repository", "Fetches changes from a remote repository", "Creates a new branch", "Pushes changes to GitHub"], answer: 0 },
      { question: "How do you configure a Git repository to automatically delete merged branches?", options: ["git config branch.autosetupmerge true", "git merge --squash", "git reset --hard", "git pull"], answer: 0 },
      { question: "How do you squash commits during a rebase?", options: ["Using `git rebase -i` and marking commits with `s` for squash", "Using `git reset --soft`", "Using `git reset --hard`", "Using `git stash`"], answer: 0 },
      { question: "What does the `--amend` option do with `git commit`?", options: ["Allows you to modify the last commit, including the message and changes", "Creates a new branch", "Pushes changes to GitHub", "Reverts the last commit"], answer: 0 },
      { question: "What is the purpose of the `git bundle` command?", options: ["To create a single file that contains a repository and its commits for sharing", "To bundle multiple commits together", "To create a pull request", "To merge branches"], answer: 0 },
      { question: "What is the difference between `git gc` and `git prune`?", options: ["`git gc` optimizes the repository, `git prune` removes unreachable objects", "`git gc` deletes commits, `git prune` creates branches", "`git gc` merges branches, `git prune` creates commits", "`git prune` is for pushing changes, `git gc` is for merging branches"], answer: 0 },
    ]
  },
  html: {
    easy: [
      { question: "What does HTML stand for?", options: ["HyperText Markup Language", "Hyperlink Text Management Language", "Hyperlink and Text Markup Language", "Home Tool Markup Language"], answer: 0 },
      { question: "What is the purpose of the `<a>` tag in HTML?", options: ["To create a hyperlink", "To display an image", "To create a button", "To display a paragraph"], answer: 0 },
      { question: "Which tag is used to create a paragraph in HTML?", options: ["<p>", "<div>", "<h1>", "<span>"], answer: 0 },
      { question: "What is the correct HTML tag for the largest heading?", options: ["<h1>", "<h6>", "<head>", "<header>"], answer: 0 },
      { question: "What is the purpose of the `<img>` tag in HTML?", options: ["To display an image", "To create a hyperlink", "To embed a video", "To add a script"], answer: 0 },
      { question: "What does the `alt` attribute in the `<img>` tag provide?", options: ["Alternative text for the image if it cannot be displayed", "The source of the image", "A tooltip for the image", "A link to another page"], answer: 0 },
      { question: "How do you create an unordered list in HTML?", options: ["Using the `<ul>` tag", "Using the `<ol>` tag", "Using the `<li>` tag", "Using the `<table>` tag"], answer: 0 },
      { question: "What is the purpose of the `<title>` tag in HTML?", options: ["To define the title of the document shown in the browser tab", "To create a heading", "To create a hyperlink", "To display a tooltip"], answer: 0 },
      { question: "Which attribute is used to provide a unique identifier to an HTML element?", options: ["id", "class", "style", "href"], answer: 0 },
      { question: "What is the purpose of the `<br>` tag in HTML?", options: ["To insert a line break", "To create a hyperlink", "To make text bold", "To insert a space"], answer: 0 },
      { question: "What does the `href` attribute in the `<a>` tag specify?", options: ["The URL of the linked page", "The text to display", "The style of the link", "The ID of the link"], answer: 0 },
      { question: "Which HTML tag is used to display text as bold?", options: ["<b>", "<i>", "<em>", "<u>"], answer: 0 },
      { question: "Which tag is used to create an ordered list in HTML?", options: ["<ol>", "<ul>", "<li>", "<table>"], answer: 0 },
      { question: "How do you add comments in HTML?", options: ["<!-- comment -->", "// comment", "/* comment */", "{ comment }"], answer: 0 },
      { question: "Which tag is used to create a form in HTML?", options: ["<form>", "<input>", "<button>", "<fieldset>"], answer: 0 },
      { question: "What is the correct HTML tag to insert a line break?", options: ["<br>", "<lb>", "<break>", "<hr>"], answer: 0 },
      { question: "What is the `<meta>` tag used for in HTML?", options: ["To provide metadata about the HTML document", "To create a heading", "To embed images", "To create a hyperlink"], answer: 0 },
      { question: "Which HTML tag is used to define an inline frame (iframe)?", options: ["<iframe>", "<frame>", "<inline>", "<object>"], answer: 0 },
      { question: "What is the `<head>` element used for in HTML?", options: ["To contain metadata about the document", "To create a hyperlink", "To add a header section", "To define the document body"], answer: 0 },
      { question: "Which tag is used to embed a video in HTML?", options: ["<video>", "<embed>", "<iframe>", "<media>"], answer: 0 },
    ],
    medium: [
      { question: "What is the difference between block-level and inline elements in HTML?", options: ["Block elements take up the full width, inline elements take up only as much width as necessary", "Block elements are visible, inline elements are invisible", "Inline elements are for text only, block elements are for images", "There is no difference"], answer: 0 },
      { question: "What is semantic HTML?", options: ["HTML that uses meaningful tags to better describe the content", "HTML with inline styles", "HTML with comments", "HTML with CSS"], answer: 0 },
      { question: "What is the purpose of the `<section>` tag in HTML5?", options: ["To define sections in a document, such as chapters or parts of a webpage", "To create a hyperlink", "To define a navigation bar", "To create a list"], answer: 0 },
      { question: "Which HTML tag is used to define a navigation bar?", options: ["<nav>", "<header>", "<section>", "<article>"], answer: 0 },
      { question: "What is the purpose of the `<aside>` tag in HTML?", options: ["To define content that is related but separate from the main content", "To create a sidebar", "To create a footer", "To define a section"], answer: 0 },
      { question: "What does the `target` attribute in the `<a>` tag specify?", options: ["Where to open the linked document", "The size of the link", "The text of the link", "The color of the link"], answer: 0 },
      { question: "What is the purpose of the `data-*` attribute in HTML?", options: ["To store custom data private to the page or application", "To display text in bold", "To change the background color", "To specify a document's charset"], answer: 0 },
      { question: "What is the `action` attribute in the `<form>` tag used for?", options: ["To specify where to send the form data when submitted", "To create a button", "To create a hyperlink", "To create an input field"], answer: 0 },
      { question: "How do you create a submit button in an HTML form?", options: ["<button type='submit'>Submit</button>", "<input type='button'>Submit</input>", "<a>Submit</a>", "<submit>Submit</submit>"], answer: 0 },
      { question: "Which HTML5 element is used to play audio files?", options: ["<audio>", "<sound>", "<music>", "<media>"], answer: 0 },
      { question: "What is the purpose of the `for` attribute in the `<label>` tag?", options: ["To associate the label with an input element", "To create a link", "To style the text", "To submit the form"], answer: 0 },
      { question: "What does the `required` attribute do in an HTML input field?", options: ["Makes the input field mandatory", "Defines a placeholder for the input", "Changes the input type to password", "Disables the input field"], answer: 0 },
      { question: "What is the purpose of the `<fieldset>` tag in an HTML form?", options: ["To group related elements in a form", "To create a legend", "To define a paragraph", "To create a list"], answer: 0 },
      { question: "How do you specify that an input field should only accept numbers in HTML?", options: ["<input type='number'>", "<input type='numeric'>", "<input type='range'>", "<input type='digits'>"], answer: 0 },
      { question: "Which attribute is used to specify the character encoding in an HTML document?", options: ["charset", "lang", "meta", "encoding"], answer: 0 },
      { question: "What is the difference between `<div>` and `<span>`?", options: ["`<div>` is a block-level element, `<span>` is an inline element", "`<div>` is for forms, `<span>` is for text", "`<div>` is for images, `<span>` is for links", "There is no difference"], answer: 0 },
      { question: "What is the purpose of the `<picture>` tag in HTML5?", options: ["To provide multiple sources for responsive images", "To create an image", "To create a hyperlink", "To embed a video"], answer: 0 },
      { question: "What is the difference between the `<b>` and `<strong>` tags?", options: ["`<b>` is for bold styling, `<strong>` indicates important text semantically", "There is no difference", "`<b>` makes text italic, `<strong>` makes text bold", "`<b>` is an inline element, `<strong>` is a block-level element"], answer: 0 },
      { question: "What is the `<progress>` element used for?", options: ["To represent the completion progress of a task", "To create a progress bar for images", "To display a timer", "To show a percentage value"], answer: 0 },
    ],
    hard: [
      { question: "What is the difference between the `<iframe>` and `<embed>` elements?", options: ["`<iframe>` embeds a document, `<embed>` embeds external content like media or plugins", "`<iframe>` is for media files, `<embed>` is for text", "`<iframe>` is for links, `<embed>` is for forms", "`<iframe>` creates a link, `<embed>` creates a paragraph"], answer: 0 },
      { question: "What is the purpose of the `srcset` attribute in the `<img>` tag?", options: ["To provide multiple image sources for different screen sizes", "To define the alt text", "To specify the image type", "To define the image height"], answer: 0 },
      { question: "How do you ensure accessibility for screen readers using semantic HTML?", options: ["By using appropriate HTML5 elements like `<header>`, `<nav>`, `<article>`, and `<footer>`", "By using inline styles", "By using divs and spans", "By using tables"], answer: 0 },
      { question: "What is the `contenteditable` attribute in HTML?", options: ["An attribute that makes an element editable by the user", "An attribute that makes an image responsive", "An attribute that hides an element", "An attribute that disables an element"], answer: 0 },
      { question: "How do you define a table header in HTML?", options: ["Using the `<th>` tag", "Using the `<tr>` tag", "Using the `<td>` tag", "Using the `<header>` tag"], answer: 0 },
      { question: "What is the difference between the `<input type='radio'>` and `<input type='checkbox'>` elements?", options: ["Radio buttons allow only one selection, checkboxes allow multiple selections", "Checkboxes allow only one selection, radio buttons allow multiple selections", "There is no difference", "Radio buttons are for text, checkboxes are for numbers"], answer: 0 },
      { question: "What is the `autocomplete` attribute used for in an HTML form?", options: ["To enable or disable autofill suggestions for input fields", "To automatically submit the form", "To display a loading spinner", "To validate form inputs"], answer: 0 },
      { question: "What is the purpose of the `<template>` element in HTML?", options: ["To define a client-side template that is not rendered immediately when the page loads", "To define a link", "To define a form", "To define a responsive image"], answer: 0 },
      { question: "What is the difference between `defer` and `async` attributes in the `<script>` tag?", options: ["`defer` loads scripts after the HTML document is parsed, `async` loads scripts asynchronously and executes them immediately", "`defer` loads scripts synchronously, `async` loads them at the end", "`defer` is for JavaScript, `async` is for CSS", "There is no difference"], answer: 0 },
      { question: "What is the purpose of the `accesskey` attribute in HTML?", options: ["To specify a shortcut key to activate or focus an element", "To make an input field required", "To add a tooltip to an element", "To hide an element"], answer: 0 },
      { question: "What is the difference between the `<script>` tag's `type` attribute values of `text/javascript` and `module`?", options: ["`module` enables JavaScript modules and supports `import/export`, `text/javascript` is for traditional scripts", "`module` is faster", "`text/javascript` is for CSS modules", "There is no difference"], answer: 0 },
      { question: "How do you define an image map in HTML?", options: ["Using the `<map>` element to define clickable areas in an image", "Using the `<img>` tag", "Using the `<picture>` tag", "Using the `<video>` tag"], answer: 0 },
      { question: "What is the purpose of the `<figure>` and `<figcaption>` tags?", options: ["To group media content like images or diagrams and provide a caption", "To display figures and numbers", "To create an image gallery", "To add alt text to an image"], answer: 0 },
      { question: "What does the `rel` attribute in the `<link>` tag specify?", options: ["The relationship between the current document and the linked document", "The target location for a hyperlink", "The type of media file", "The size of the linked file"], answer: 0 },
      { question: "What is the purpose of the `<noscript>` element?", options: ["To define alternative content to be displayed if JavaScript is disabled or not supported", "To add comments in JavaScript", "To disable script execution", "To link external JavaScript files"], answer: 0 },
      { question: "What is the purpose of the `aria-label` attribute?", options: ["To provide accessibility information for screen readers", "To define the title of a document", "To create a tooltip", "To create a hyperlink"], answer: 0 },
      { question: "What is a `data-*` attribute in HTML?", options: ["A way to embed custom data attributes on elements", "A way to add metadata", "A way to create hyperlinks", "A way to add classes"], answer: 0 },
      { question: "What is the difference between the `<fieldset>` and `<legend>` elements?", options: ["`<fieldset>` groups form elements, `<legend>` provides a caption for the group", "`<fieldset>` is for tables, `<legend>` is for figures", "`<fieldset>` is for images, `<legend>` is for text", "There is no difference"], answer: 0 },
      { question: "What is the purpose of the `required` attribute in HTML input fields?", options: ["To make the input field mandatory", "To validate the input", "To clear the input", "To disable the input"], answer: 0 },
      { question: "What is the difference between the `<label>` and `<legend>` elements?", options: ["`<label>` associates text with an individual input, `<legend>` provides a title for a group of inputs", "`<label>` is for images, `<legend>` is for text", "`<label>` is for paragraphs, `<legend>` is for sections", "There is no difference"], answer: 0 },
    ]
  },
  css: {
    easy: [
      { question: "What does CSS stand for?", options: ["Cascading Style Sheets", "Computer Style Sheets", "Creative Style Sheets", "Colorful Style Sheets"], answer: 0 },
      { question: "What is the purpose of CSS?", options: ["To style the appearance of HTML elements", "To create web pages", "To structure HTML documents", "To handle server-side scripting"], answer: 0 },
      { question: "Which HTML tag is used to link an external CSS file?", options: ["<link>", "<style>", "<script>", "<head>"], answer: 0 },
      { question: "How do you apply inline CSS to an HTML element?", options: ["Using the `style` attribute", "Using the `link` tag", "Using the `class` attribute", "Using the `href` attribute"], answer: 0 },
      { question: "What is the correct syntax to change the text color to red in CSS?", options: ["color: red;", "text-color: red;", "font-color: red;", "background-color: red;"], answer: 0 },
      { question: "What is the CSS property for setting the background color?", options: ["background-color", "color", "font-color", "bgcolor"], answer: 0 },
      { question: "Which property is used to change the font of an element?", options: ["font-family", "font-style", "font-weight", "text-font"], answer: 0 },
      { question: "What is the CSS property for making text bold?", options: ["font-weight: bold;", "font-style: bold;", "font-size: bold;", "text-decoration: bold;"], answer: 0 },
      { question: "How do you add a comment in CSS?", options: ["/* comment */", "// comment", "<!-- comment -->", "** comment"], answer: 0 },
      { question: "What is the default value of the `position` property in CSS?", options: ["static", "relative", "absolute", "fixed"], answer: 0 },
      { question: "How do you create a class in CSS?", options: [".classname", "#classname", "classname", "//classname"], answer: 0 },
      { question: "How do you select an element with a specific id in CSS?", options: ["#idname", ".idname", "idname", "//idname"], answer: 0 },
      { question: "Which property is used to change the size of text?", options: ["font-size", "text-size", "text-height", "font-weight"], answer: 0 },
      { question: "How do you underline text in CSS?", options: ["text-decoration: underline;", "text-decoration: overline;", "font-style: underline;", "text-style: underline;"], answer: 0 },
      { question: "Which CSS property is used to set the spacing between lines of text?", options: ["line-height", "letter-spacing", "text-spacing", "font-spacing"], answer: 0 },
      { question: "How do you center a block element horizontally in CSS?", options: ["margin: 0 auto;", "text-align: center;", "float: center;", "align-content: center;"], answer: 0 },
      { question: "What is the purpose of the `z-index` property?", options: ["To control the stacking order of elements", "To control the visibility of elements", "To control the position of elements", "To control the opacity of elements"], answer: 0 },
      { question: "How do you set the background image in CSS?", options: ["background-image: url('image.jpg');", "background-color: url('image.jpg');", "image: url('image.jpg');", "bg-image: url('image.jpg');"], answer: 0 },
      { question: "What is the purpose of the `display` property in CSS?", options: ["To specify how an element is displayed", "To control the visibility of an element", "To control the background color", "To set the height of an element"], answer: 0 },
    ],
    medium: [
      { question: "What is the CSS box model?", options: ["A model that defines the spacing around and inside elements, including margin, border, padding, and content", "A model that defines the height and width of an element", "A model that defines the font size and color", "A model that defines the layout of the document"], answer: 0 },
      { question: "What does the `box-sizing: border-box;` property do?", options: ["Makes the width and height include the padding and border", "Adds extra space outside the box", "Expands the box to fill its container", "Changes the background color of the box"], answer: 0 },
      { question: "Which property is used to control the visibility of an element?", options: ["visibility", "display", "opacity", "overflow"], answer: 0 },
      { question: "How do you apply a style to only one element on the page?", options: ["Using an id selector", "Using a class selector", "Using a type selector", "Using a descendant selector"], answer: 0 },
      { question: "What is the difference between `margin` and `padding`?", options: ["`margin` is the space outside an element, `padding` is the space inside", "`margin` is for height, `padding` is for width", "`padding` is for text, `margin` is for images", "`padding` changes the background color, `margin` changes the text color"], answer: 0 },
      { question: "What is the purpose of the `flex` property in CSS Flexbox?", options: ["To define how a flex item will grow or shrink to fit the space", "To control the font size", "To make an image responsive", "To align text horizontally"], answer: 0 },
      { question: "How do you center content inside a flex container?", options: ["Using `justify-content: center;` and `align-items: center;`", "Using `margin: 0 auto;`", "Using `text-align: center;`", "Using `display: inline-block;`"], answer: 0 },
      { question: "What does the `float` property do in CSS?", options: ["Allows an element to be taken out of the normal document flow and positioned to the left or right", "Centers an element", "Makes text bold", "Changes the background color"], answer: 0 },
      { question: "What is the difference between `inline` and `block` elements in CSS?", options: ["`block` elements take up the full width, `inline` elements take up only as much width as necessary", "`inline` elements are always visible, `block` elements are hidden", "`block` elements are smaller than `inline` elements", "`inline` elements cannot contain other elements"], answer: 0 },
      { question: "How do you create a grid layout in CSS?", options: ["Using `display: grid;`", "Using `display: flex;`", "Using `position: relative;`", "Using `float: left;`"], answer: 0 },
      { question: "What is the purpose of the `@media` rule in CSS?", options: ["To create responsive designs that adapt to different screen sizes", "To add media elements like images and videos", "To create a grid layout", "To style text"], answer: 0 },
      { question: "What does the `position: absolute;` property do?", options: ["Positions the element relative to its nearest positioned ancestor", "Positions the element relative to the viewport", "Positions the element at the top of the page", "Positions the element relative to its parent element"], answer: 0 },
      { question: "Which property is used to set the transparency of an element?", options: ["opacity", "visibility", "filter", "color"], answer: 0 },
      { question: "How do you apply a style to every `<p>` element inside a `<div>`?", options: ["div p", "div > p", "p div", "p + div"], answer: 0 },
      { question: "How do you increase the space between letters in CSS?", options: ["letter-spacing", "word-spacing", "line-height", "text-spacing"], answer: 0 },
      { question: "What is the `z-index` property used for?", options: ["To control the stacking order of overlapping elements", "To control the width of an element", "To control the font size of text", "To control the background color of an element"], answer: 0 },
      { question: "What does the `overflow: hidden;` property do?", options: ["Hides any content that overflows the bounds of its container", "Shows content that overflows the container", "Centers the content within the container", "Expands the container to fit the content"], answer: 0 },
      { question: "What does the `hover` pseudo-class do in CSS?", options: ["Applies a style when the user hovers over an element", "Applies a style when the element is clicked", "Applies a style when the page loads", "Applies a style when the element is focused"], answer: 0 },
      { question: "How do you create a responsive design in CSS?", options: ["Using media queries with the `@media` rule", "Using only `flexbox`", "Using `inline` and `block` elements", "Using `opacity`"], answer: 0 },
    ],
    hard: [
      { question: "What is the difference between `position: relative;` and `position: absolute;`?", options: ["`relative` positions an element relative to itself, `absolute` positions it relative to its nearest positioned ancestor", "`absolute` positions an element at the top of the page, `relative` positions it at the bottom", "`relative` positions an element outside the document flow, `absolute` keeps it inside", "`absolute` can only be used on inline elements"], answer: 0 },
      { question: "What is the purpose of the `calc()` function in CSS?", options: ["To perform calculations to dynamically set CSS property values", "To calculate the width of images", "To calculate the size of text", "To change the background color"], answer: 0 },
      { question: "How do you create a CSS animation?", options: ["Using `@keyframes` to define the animation and `animation` to apply it", "Using `hover` and `focus`", "Using `display: inline;`", "Using `opacity` and `z-index`"], answer: 0 },
      { question: "What is the `nth-child()` selector used for?", options: ["To select elements based on their position within a parent element", "To select the first child of an element", "To select all children of an element", "To select the last child of an element"], answer: 0 },
      { question: "How do you create a grid layout with equal-width columns in CSS Grid?", options: ["Using `grid-template-columns: repeat(auto-fill, minmax(0, 1fr));`", "Using `display: flex;`", "Using `grid-auto-flow: column;`", "Using `position: absolute;`"], answer: 0 },
      { question: "What is the difference between `justify-content` and `align-items` in Flexbox?", options: ["`justify-content` aligns items along the main axis, `align-items` aligns items along the cross axis", "`justify-content` aligns text, `align-items` aligns images", "`align-items` is for horizontal alignment, `justify-content` is for vertical alignment", "`justify-content` is for block elements, `align-items` is for inline elements"], answer: 0 },
      { question: "How do you prevent an element from being resized in CSS?", options: ["Using the `resize: none;` property", "Using the `overflow: hidden;` property", "Using `width: 100%;`", "Using `z-index: 0;`"], answer: 0 },
      { question: "What does the `grid-area` property do in CSS Grid?", options: ["Specifies a grid item's position and size within the grid", "Controls the grid's size", "Centers the grid within the container", "Creates responsive columns"], answer: 0 },
      { question: "What is the difference between `inline-block` and `inline` in CSS?", options: ["`inline-block` allows setting width and height, `inline` does not", "`inline-block` is for images, `inline` is for text", "`inline` takes up the full width, `inline-block` does not", "There is no difference"], answer: 0 },
      { question: "What is the purpose of the `::before` and `::after` pseudo-elements?", options: ["To insert content before or after an element's actual content", "To apply styles when an element is clicked", "To remove an element from the DOM", "To center an element"], answer: 0 },
      { question: "How do you create a sticky header in CSS?", options: ["Using `position: sticky;`", "Using `position: fixed;`", "Using `position: absolute;`", "Using `position: relative;`"], answer: 0 },
      { question: "What is the `transform` property used for in CSS?", options: ["To apply 2D or 3D transformations to elements", "To change the background color", "To control the font size", "To position elements"], answer: 0 },
      { question: "What is the difference between `max-width` and `width` in CSS?", options: ["`max-width` sets the maximum width an element can have, `width` sets a fixed width", "`width` adjusts to the screen size, `max-width` does not", "`max-width` is only for block elements", "There is no difference"], answer: 0 },
      { question: "How do you create a responsive image in CSS?", options: ["Using `max-width: 100%;` and `height: auto;`", "Using `position: absolute;`", "Using `opacity: 1;`", "Using `z-index: 10;`"], answer: 0 },
      { question: "What is the purpose of the `clip-path` property in CSS?", options: ["To define a clipping region where only part of an element is visible", "To hide an element", "To create a fixed header", "To center text inside a div"], answer: 0 },
      { question: "How do you control the order of items in a Flexbox container?", options: ["Using the `order` property", "Using the `z-index` property", "Using the `justify-content` property", "Using the `align-items` property"], answer: 0 },
      { question: "What is the difference between `opacity` and `visibility` in CSS?", options: ["`opacity` changes the transparency of an element, `visibility` hides or shows an element", "`opacity` changes the color, `visibility` changes the background", "`visibility` controls the width, `opacity` controls the height", "`opacity` is for images, `visibility` is for text"], answer: 0 },
      { question: "What is the difference between `transform: rotate()` and `transform: skew()`?", options: ["`rotate()` rotates the element, `skew()` tilts or slants it", "`rotate()` changes the size, `skew()` changes the color", "`skew()` rotates elements along the Z-axis", "`rotate()` is for text, `skew()` is for images"], answer: 0 },
      { question: "How do you create a CSS transition effect?", options: ["Using the `transition` property to define the duration and type of transition", "Using the `display` property", "Using `position: absolute;`", "Using `z-index`"], answer: 0 },
    ]
  },
  nextjs: {
    easy: [
      { question: "What is Next.js?", options: ["A React framework for building server-rendered applications", "A CSS framework", "A database system", "A JavaScript testing library"], answer: 0 },
      { question: "How do you create a new Next.js project?", options: ["npx create-next-app", "npm create-react-app", "npx create-next-project", "npm install next"], answer: 0 },
      { question: "What is the purpose of the `pages` directory in Next.js?", options: ["To define routes and pages of the application", "To store global CSS files", "To manage API routes", "To handle middleware"], answer: 0 },
      { question: "How do you link between pages in a Next.js app?", options: ["Using the `Link` component from `next/link`", "Using `<a>` tags", "Using `window.location`", "Using `React Router`"], answer: 0 },
      { question: "What is the default port for a Next.js application?", options: ["3000", "8000", "5000", "8080"], answer: 0 },
      { question: "What is the purpose of the `getStaticProps` function in Next.js?", options: ["To fetch data at build time for static generation", "To fetch data on every request", "To handle API routes", "To manage global styles"], answer: 0 },
      { question: "What is the default file for the homepage in Next.js?", options: ["pages/index.tsx", "pages/home.tsx", "pages/main.tsx", "pages/app.tsx"], answer: 0 },
      { question: "What is the purpose of the `public` directory in a Next.js project?", options: ["To store static assets like images and fonts", "To store components", "To manage API routes", "To define environment variables"], answer: 0 },
      { question: "What does `getServerSideProps` do in Next.js?", options: ["Fetches data on each request for server-side rendering", "Fetches data at build time", "Handles client-side routing", "Handles API requests"], answer: 0 },
      { question: "Which file is used to configure custom document-level changes like meta tags in Next.js?", options: ["pages/_document.tsx", "pages/_app.tsx", "pages/index.tsx", "pages/_config.tsx"], answer: 0 },
      { question: "How do you handle API routes in Next.js?", options: ["Using the `pages/api` directory", "Using `React Router`", "Using the `pages/routes` directory", "Using external APIs only"], answer: 0 },
      { question: "What does the `next/link` component optimize in Next.js?", options: ["Client-side navigation without full page reload", "Linking stylesheets", "Managing external libraries", "Handling API requests"], answer: 0 },
      { question: "Which command is used to start a Next.js development server?", options: ["npm run dev", "npm start", "next build", "npm run start"], answer: 0 },
      { question: "What is the purpose of the `_app.tsx` file in Next.js?", options: ["To customize the global layout and wrap every page", "To manage page-specific styles", "To handle API routes", "To define page-level metadata"], answer: 0 },
      { question: "How do you statically export a Next.js site?", options: ["next export", "npm run build", "next build", "npm run export"], answer: 0 },
      { question: "What is the purpose of `Image` component from `next/image`?", options: ["To optimize images for faster loading and better performance", "To handle image uploads", "To link images to APIs", "To manage animations"], answer: 0 },
      { question: "How do you create dynamic routes in Next.js?", options: ["Using brackets ([]) in the filename inside the `pages` directory", "Using a router library", "Using conditional rendering", "Using query parameters in the URL"], answer: 0 },
      { question: "What is the purpose of the `next.config.js` file?", options: ["To configure settings like environment variables, webpack, and plugins", "To manage CSS files", "To handle database connections", "To manage API routes"], answer: 0 },
      { question: "Which function is used for incremental static regeneration in Next.js?", options: ["getStaticProps with revalidate", "getServerSideProps", "useEffect", "getInitialProps"], answer: 0 },
      { question: "How do you handle CSS in Next.js?", options: ["Using CSS modules or global styles imported in `_app.tsx`", "Using inline styles", "Using external libraries only", "Using JavaScript to style elements"], answer: 0 },
    ],
    medium: [
      { question: "What is the difference between `getStaticProps` and `getServerSideProps` in Next.js?", options: ["`getStaticProps` runs at build time, `getServerSideProps` runs on each request", "`getServerSideProps` is for client-side data, `getStaticProps` is for server-side data", "`getStaticProps` handles dynamic routes, `getServerSideProps` handles static routes", "There is no difference"], answer: 0 },
      { question: "How do you create a 404 error page in Next.js?", options: ["By creating a `404.tsx` file inside the `pages` directory", "By using `getStaticProps`", "By modifying the `next.config.js` file", "By using an external error handling library"], answer: 0 },
      { question: "What is the `useRouter` hook in Next.js used for?", options: ["To access the Next.js router and handle client-side navigation", "To handle server-side data fetching", "To manage global state", "To link external libraries"], answer: 0 },
      { question: "What does `next build` do in a Next.js application?", options: ["Compiles the project and prepares it for production", "Starts the development server", "Runs tests for the application", "Handles API requests"], answer: 0 },
      { question: "What is the purpose of the `fallback` option in dynamic routes?", options: ["To handle pages that are not pre-rendered during build", "To handle API routes", "To manage CSS files", "To optimize image loading"], answer: 0 },
      { question: "How does Next.js handle server-side rendering (SSR)?", options: ["By using `getServerSideProps` to fetch data on each request", "By using `useEffect` to fetch data", "By using `getStaticProps` to fetch data at build time", "By using `next/image` for images"], answer: 0 },
      { question: "How do you manage metadata like title and description for pages in Next.js?", options: ["Using the `Head` component from `next/head`", "Using the `next.config.js` file", "Using the `pages/_app.tsx` file", "Using the `next/document` component"], answer: 0 },
      { question: "What is ISR (Incremental Static Regeneration) in Next.js?", options: ["A method for updating static pages after build without rebuilding the entire site", "A way to handle API routes", "A feature to manage dynamic imports", "A method for handling global styles"], answer: 0 },
      { question: "What is the purpose of `next/head` in Next.js?", options: ["To manage the document's head elements such as title, meta tags, and links", "To optimize images", "To handle API requests", "To fetch server-side data"], answer: 0 },
      { question: "How do you implement client-side navigation in Next.js?", options: ["Using the `Link` component from `next/link`", "Using the `a` tag", "Using `window.location.href`", "Using `next/head`"], answer: 0 },
      { question: "How do you access query parameters in Next.js using dynamic routing?", options: ["Using `useRouter().query` from `next/router`", "Using `getStaticProps`", "Using `getServerSideProps`", "Using `useEffect`"], answer: 0 },
      { question: "What is `getInitialProps` in Next.js?", options: ["A legacy data fetching method for both server-side and client-side rendering", "A method to handle API requests", "A function to manage global state", "A hook for client-side routing"], answer: 0 },
      { question: "How do you optimize images in a Next.js project?", options: ["By using the `Image` component from `next/image`", "By using the `img` tag", "By using `getStaticProps`", "By using `next.config.js`"], answer: 0 },
      { question: "What is pre-rendering in Next.js?", options: ["Generating HTML for each page in advance, either at build time or on each request", "Rendering HTML dynamically on the client-side", "Rendering only JavaScript on the server", "Caching pages for performance"], answer: 0 },
      { question: "What does the `fallback: true` option do in dynamic routes?", options: ["Renders a fallback page while the page is being generated", "Throws a 404 error", "Redirects to the homepage", "Fetches client-side data"], answer: 0 },
      { question: "How does Next.js handle CSS imports?", options: ["By importing CSS files in `pages/_app.tsx` or using CSS modules", "By using inline styles", "By adding styles in `next.config.js`", "By using `getStaticProps`"], answer: 0 },
      { question: "What is the difference between `getStaticProps` and `getInitialProps`?", options: ["`getStaticProps` is used for static generation, `getInitialProps` is a legacy method for both SSR and CSR", "`getStaticProps` is for server-side rendering, `getInitialProps` is for client-side rendering", "`getStaticProps` is for dynamic routes, `getInitialProps` is for static routes", "There is no difference"], answer: 0 },
      { question: "How do you handle environment variables in Next.js?", options: ["By using `.env.local` or `next.config.js`", "By using `getStaticProps`", "By importing variables in `pages/_app.tsx`", "By using the `useRouter` hook"], answer: 0 },
      { question: "What is the purpose of the `revalidate` property in `getStaticProps`?", options: ["To enable incremental static regeneration (ISR)", "To enable client-side navigation", "To refresh the page on every request", "To manage API requests"], answer: 0 },
      { question: "How do you handle redirects in Next.js?", options: ["Using the `redirects` property in `next.config.js` or in `getServerSideProps`", "Using the `Link` component", "Using the `a` tag", "Using `window.location.href`"], answer: 0 },
    ],
    hard: [
      { question: "How do you implement custom middleware in Next.js?", options: ["By using the `middleware` function in the root directory", "By configuring it in `next.config.js`", "By adding it in `pages/_app.tsx`", "By using `getServerSideProps`"], answer: 0 },
      { question: "What is the purpose of static optimization in Next.js?", options: ["To automatically optimize pages without data fetching to be statically generated", "To manage CSS imports", "To handle API routes", "To improve SEO"], answer: 0 },
      { question: "What is a hybrid Next.js application?", options: ["An application that uses both static generation (SSG) and server-side rendering (SSR)", "An application that uses both React and Angular", "An application that only uses server-side rendering", "An application that only uses static generation"], answer: 0 },
      { question: "How does Next.js optimize JavaScript bundles for performance?", options: ["By splitting JavaScript bundles for each page, ensuring only necessary code is loaded", "By minifying the JavaScript files", "By preloading all JavaScript files", "By caching the JavaScript files"], answer: 0 },
      { question: "What is `next/script` used for in Next.js?", options: ["To optimize loading of third-party scripts with attributes like `defer` and `async`", "To load custom JavaScript", "To handle API requests", "To manage static assets"], answer: 0 },
      { question: "What is the difference between `getStaticProps`, `getServerSideProps`, and `getInitialProps` in Next.js?", options: ["`getStaticProps` is for static generation, `getServerSideProps` for SSR, and `getInitialProps` is a legacy method for both", "`getStaticProps` and `getServerSideProps` are for server-side rendering, `getInitialProps` is for client-side rendering", "`getServerSideProps` is for static generation, `getStaticProps` for SSR, and `getInitialProps` is for dynamic routing", "There is no difference"], answer: 0 },
      { question: "What is automatic static optimization in Next.js?", options: ["When Next.js automatically determines that a page can be statically generated without `getStaticProps`", "When Next.js preloads all JavaScript files", "When Next.js optimizes images", "When Next.js caches static assets"], answer: 0 },
      { question: "How does Next.js handle concurrent API requests?", options: ["By using API routes in the `pages/api` directory, which run on serverless functions", "By using `getStaticProps` to fetch data", "By using `useEffect` to fetch data client-side", "By using the `Link` component"], answer: 0 },
      { question: "How do you enable TypeScript in a Next.js project?", options: ["By adding a `tsconfig.json` file to the project", "By importing TypeScript in `next.config.js`", "By using `getStaticProps`", "By adding a `jsconfig.json` file to the project"], answer: 0 },
      { question: "What is dynamic import in Next.js?", options: ["A feature that allows importing JavaScript modules dynamically, enabling code-splitting", "A way to load CSS modules", "A method to handle API routes", "A way to load environment variables"], answer: 0 },
      { question: "How do you create a custom 500 error page in Next.js?", options: ["By creating a `500.tsx` file inside the `pages` directory", "By modifying the `next.config.js` file", "By using the `getStaticProps` function", "By using the `useRouter` hook"], answer: 0 },
      { question: "What is the difference between a serverless function and a traditional server in Next.js?", options: ["Serverless functions run in the cloud and scale automatically, while traditional servers require manual scaling and management", "Serverless functions handle client-side navigation", "Serverless functions load faster than traditional servers", "There is no difference"], answer: 0 },
      { question: "How do you handle image optimization in Next.js for different screen sizes?", options: ["By using the `Image` component from `next/image` and providing `srcSet` or `sizes` attributes", "By using `getStaticProps`", "By using the `img` tag", "By using `useEffect`"], answer: 0 },
      { question: "What is the purpose of the `isFallback` property in Next.js dynamic routes?", options: ["To indicate whether the page is in fallback mode during incremental static regeneration", "To handle client-side routing", "To manage API requests", "To fetch server-side data"], answer: 0 },
      { question: "How does Next.js handle SEO (Search Engine Optimization)?", options: ["By enabling server-side rendering (SSR) and static generation (SSG) for better indexing by search engines", "By optimizing JavaScript bundles", "By handling API routes", "By caching static files"], answer: 0 },
      { question: "What is the purpose of middleware in Next.js?", options: ["To execute code before a request is completed, allowing for redirection or authentication", "To handle data fetching", "To manage global state", "To load external libraries"], answer: 0 },
      { question: "How does Next.js handle caching of static files?", options: ["By automatically caching static assets in the `public` folder and pre-rendered pages", "By caching API requests", "By caching CSS files", "By caching dynamic routes"], answer: 0 },
      { question: "What is the purpose of the `next/head` component?", options: ["To manage the document's head tags, such as meta tags, titles, and links", "To handle server-side rendering", "To manage client-side routing", "To optimize images"], answer: 0 },
      { question: "How does Next.js support hybrid rendering?", options: ["By combining static generation (SSG) and server-side rendering (SSR) in the same application", "By using `useEffect` for client-side rendering", "By using `next/head` for metadata", "By using `next/image` for image optimization"], answer: 0 },
      { question: "What is the purpose of `rewrites` in the `next.config.js` file?", options: ["To map incoming request paths to different destination paths without changing the URL", "To manage CSS imports", "To fetch client-side data", "To handle global state"], answer: 0 },
    ]
  },
  angular: {
    easy: [
      { question: "What is Angular?", options: ["A TypeScript-based open-source web application framework", "A CSS framework", "A database management system", "A programming language"], answer: 0 },
      { question: "Which company developed Angular?", options: ["Google", "Facebook", "Microsoft", "Apple"], answer: 0 },
      { question: "What is the primary language used to build Angular applications?", options: ["TypeScript", "JavaScript", "Java", "Python"], answer: 0 },
      { question: "Which command is used to create a new Angular project?", options: ["ng new", "npm init", "ng generate app", "ng build"], answer: 0 },
      { question: "What is a component in Angular?", options: ["A building block of the UI in Angular applications", "A database entity", "A CSS class", "A TypeScript module"], answer: 0 },
      { question: "Which decorator is used to define a component in Angular?", options: ["@Component", "@Module", "@Directive", "@Service"], answer: 0 },
      { question: "Which file defines the root module in an Angular application?", options: ["app.module.ts", "index.html", "main.ts", "angular.json"], answer: 0 },
      { question: "What is the purpose of the `ngFor` directive in Angular?", options: ["To iterate over a collection and render elements for each item", "To add conditional rendering", "To handle forms", "To apply styles"], answer: 0 },
      { question: "How do you bind data from a component to a template in Angular?", options: ["Using interpolation `{{}}`", "Using `ng-model`", "Using `ng-bind`", "Using `ng-controller`"], answer: 0 },
      { question: "What is the purpose of the `ngIf` directive in Angular?", options: ["To conditionally display elements based on a Boolean expression", "To iterate over a list", "To apply styles", "To handle forms"], answer: 0 },
      { question: "How do you handle form input in Angular?", options: ["Using `ngModel` for two-way data binding", "Using `ngIf`", "Using `ngClass`", "Using `ngFor`"], answer: 0 },
      { question: "What is the purpose of the `routerLink` directive in Angular?", options: ["To navigate between different routes", "To apply styles", "To bind data", "To handle events"], answer: 0 },
      { question: "What is the purpose of the `app-routing.module.ts` file in Angular?", options: ["To define the routes for an Angular application", "To style components", "To handle form data", "To define services"], answer: 0 },
      { question: "How do you define a service in Angular?", options: ["Using the `@Injectable` decorator", "Using the `@Component` decorator", "Using the `@Directive` decorator", "Using the `@Module` decorator"], answer: 0 },
      { question: "Which lifecycle hook is called when a component is initialized in Angular?", options: ["ngOnInit", "ngOnDestroy", "ngAfterViewInit", "ngDoCheck"], answer: 0 },
      { question: "How do you generate a new component in Angular using the CLI?", options: ["ng generate component component-name", "ng generate module component-name", "ng create component component-name", "ng add component component-name"], answer: 0 },
      { question: "What is Angular CLI?", options: ["A command-line interface tool to scaffold and manage Angular projects", "A database management tool", "A testing library", "A JavaScript framework"], answer: 0 },
      { question: "What is the purpose of `ngOnDestroy` lifecycle hook in Angular?", options: ["To perform cleanup when a component is destroyed", "To initialize the component", "To check for data changes", "To apply styles"], answer: 0 },
      { question: "How do you add CSS styles to an Angular component?", options: ["By adding styles in the `styles` array of the `@Component` decorator", "By importing them in `app.module.ts`", "By adding styles to the `angular.json` file", "By using the `@Directive` decorator"], answer: 0 },
    ],
    medium: [
      { question: "What is dependency injection in Angular?", options: ["A design pattern where Angular provides services to components or other services", "A way to pass data between components", "A way to inject styles", "A method to handle routing"], answer: 0 },
      { question: "What is the purpose of `ng-content` in Angular?", options: ["To project content from parent components into child components", "To apply styles conditionally", "To handle form data", "To create a new route"], answer: 0 },
      { question: "How do you pass data from a parent component to a child component in Angular?", options: ["Using `@Input` decorator", "Using `@Output` decorator", "Using `ngModel`", "Using `ngFor`"], answer: 0 },
      { question: "What is the purpose of the `@Output` decorator in Angular?", options: ["To emit an event from a child component to the parent component", "To bind data to the template", "To add conditional styling", "To manage forms"], answer: 0 },
      { question: "What is lazy loading in Angular?", options: ["A technique that loads modules or components on demand, improving performance", "A method to load images asynchronously", "A way to handle form submission", "A method to inject dependencies"], answer: 0 },
      { question: "How do you implement routing guards in Angular?", options: ["Using services that implement the `CanActivate` or `CanDeactivate` interface", "Using the `ngIf` directive", "Using `ngOnInit`", "Using `ngModel`"], answer: 0 },
      { question: "What is the purpose of `rxjs` in Angular?", options: ["To handle asynchronous data streams and reactive programming", "To manage forms", "To style components", "To handle routing"], answer: 0 },
      { question: "What is the difference between `Observable` and `Promise` in Angular?", options: ["`Observable` can handle multiple values over time, `Promise` handles only a single value", "`Promise` is faster", "`Observable` works only with HTTP requests", "`Promise` works only with data binding"], answer: 0 },
      { question: "What is a pipe in Angular?", options: ["A feature that transforms data in templates", "A service that handles HTTP requests", "A directive that applies styles", "A lifecycle hook"], answer: 0 },
      { question: "What is the difference between a structural directive and an attribute directive in Angular?", options: ["Structural directives change the DOM layout, attribute directives change the appearance or behavior of an element", "Attribute directives bind data to templates", "Structural directives handle form validation", "There is no difference"], answer: 0 },
      { question: "What is the purpose of `@HostListener` in Angular?", options: ["To listen to and handle DOM events in directives or components", "To inject services", "To manage routing", "To create forms"], answer: 0 },
      { question: "How do you handle HTTP requests in Angular?", options: ["Using the `HttpClient` service from `@angular/common/http`", "Using `fetch`", "Using `@Output`", "Using `@Input`"], answer: 0 },
      { question: "What is a resolver in Angular routing?", options: ["A service that pre-fetches data before a route is activated", "A directive that applies styles", "A lifecycle hook that initializes the component", "A method to handle form submissions"], answer: 0 },
      { question: "What is the `ng-template` element used for in Angular?", options: ["To define a template that can be reused or conditionally rendered", "To bind data to forms", "To handle routing", "To style components"], answer: 0 },
      { question: "What is the purpose of `ng-container` in Angular?", options: ["A logical container that does not render a DOM element but can contain structural directives", "A container for form elements", "A lifecycle hook that initializes the component", "A method to inject dependencies"], answer: 0 },
      { question: "How do you implement custom pipes in Angular?", options: ["By creating a class decorated with `@Pipe` and implementing the `PipeTransform` interface", "By using `ngModel`", "By using the `@Output` decorator", "By using `@HostListener`"], answer: 0 },
      { question: "What is `ChangeDetectionStrategy.OnPush` in Angular?", options: ["An optimization strategy that updates the view only when the input properties of a component change", "A method to handle HTTP requests", "A directive that applies styles conditionally", "A lifecycle hook that checks for data changes"], answer: 0 },
      { question: "What is the purpose of `ViewChild` and `ContentChild` in Angular?", options: ["To get references to child components, directives, or DOM elements", "To pass data between components", "To manage form data", "To handle asynchronous events"], answer: 0 },
      { question: "What is Angular's `ngZone` used for?", options: ["To run code inside or outside of Angular's change detection mechanism", "To create components", "To handle routing", "To manage forms"], answer: 0 },
    ],
    hard: [
      { question: "What is `ngOnChanges` lifecycle hook in Angular?", options: ["A hook that detects changes to input properties of a component", "A hook that initializes a component", "A hook that destroys a component", "A hook that listens to events"], answer: 0 },
      { question: "What is Angular Universal?", options: ["A tool for server-side rendering of Angular applications", "A database management system", "A state management library", "A testing framework"], answer: 0 },
      { question: "What is the difference between `ng-template` and `ng-container`?", options: ["`ng-template` defines a template for reusable content, `ng-container` is a logical grouping that does not render extra DOM elements", "`ng-template` is for forms, `ng-container` is for routing", "`ng-template` handles change detection", "`ng-container` handles event listeners"], answer: 0 },
      { question: "How does Angular handle two-way data binding?", options: ["Using `[(ngModel)]` to bind data between the view and the component", "Using `@Input` and `@Output` decorators", "Using `ngOnInit`", "Using `ngFor` and `ngIf`"], answer: 0 },
      { question: "What is a custom structural directive in Angular?", options: ["A directive that can modify the DOM structure, like adding or removing elements", "A directive that binds data to forms", "A directive that handles HTTP requests", "A directive that applies styles"], answer: 0 },
      { question: "What is the `AsyncPipe` used for in Angular?", options: ["To subscribe to an Observable or Promise and automatically update the view with its emitted values", "To handle HTTP requests", "To inject services", "To manage routing"], answer: 0 },
      { question: "What is the difference between `forRoot()` and `forChild()` methods in Angular routing?", options: ["`forRoot()` is used to set up the main routes in an application, `forChild()` is used for feature module routes", "`forRoot()` is for parent components, `forChild()` is for child components", "`forRoot()` is for routing guards, `forChild()` is for services", "There is no difference"], answer: 0 },
      { question: "How do you implement guards for route deactivation in Angular?", options: ["By implementing the `CanDeactivate` interface in the guard service", "By using `ngOnDestroy`", "By using `@Input` and `@Output`", "By using `ngModel`"], answer: 0 },
      { question: "What is the `Renderer2` service used for in Angular?", options: ["To manipulate DOM elements in a platform-independent way", "To handle form submissions", "To bind data between components", "To manage asynchronous events"], answer: 0 },
      { question: "What is the `ngDoCheck` lifecycle hook used for in Angular?", options: ["To detect and act upon changes that Angular does not detect automatically", "To initialize a component", "To destroy a component", "To inject dependencies"], answer: 0 },
      { question: "How does Angular handle asynchronous operations with `HttpClient`?", options: ["By returning an `Observable` that can be subscribed to", "By using Promises", "By using the `setTimeout` function", "By using `ngOnInit`"], answer: 0 },
      { question: "What is the `RouterModule.forRoot()` method used for in Angular?", options: ["To configure the application's main routing module", "To define child routes", "To handle form validation", "To apply styles"], answer: 0 },
      { question: "What is the difference between `Subject` and `BehaviorSubject` in Angular RxJS?", options: ["`BehaviorSubject` holds the latest value and emits it to new subscribers, `Subject` does not", "`BehaviorSubject` is for HTTP requests", "`Subject` handles routing", "`BehaviorSubject` is for lifecycle hooks"], answer: 0 },
      { question: "What is the purpose of `trackBy` in Angular `ngFor` directive?", options: ["To optimize performance by tracking changes to items in a list", "To bind data between components", "To handle form submissions", "To apply conditional styles"], answer: 0 },
      { question: "What is Angular Ivy?", options: ["A next-generation rendering engine for faster and more optimized Angular applications", "A state management tool", "A testing framework", "A routing module"], answer: 0 },
      { question: "How do you handle form validation in Angular reactive forms?", options: ["By using `Validators` in form controls and groups", "By using `ngModel`", "By using `@Output`", "By using `ngFor`"], answer: 0 },
      { question: "What is Ahead-of-Time (AOT) compilation in Angular?", options: ["A process of compiling Angular templates and components during the build, improving runtime performance", "A method for managing state", "A way to optimize routing", "A directive that applies styles"], answer: 0 },
      { question: "What is the difference between reactive forms and template-driven forms in Angular?", options: ["Reactive forms use an explicit and immutable data model, while template-driven forms rely on two-way data binding", "Reactive forms are for large applications, template-driven forms are for small applications", "Template-driven forms handle HTTP requests", "There is no difference"], answer: 0 },
      { question: "What is the purpose of the `FormBuilder` service in Angular?", options: ["To simplify the creation of reactive forms", "To create components", "To manage routing", "To handle lifecycle hooks"], answer: 0 },
      { question: "What is the difference between `resolve` and `guard` in Angular routing?", options: ["Resolvers pre-fetch data before activating a route, guards restrict access based on certain conditions", "`resolve` handles HTTP requests", "`guard` manages forms", "There is no difference"], answer: 0 },
    ]
  },
  astro: {
    easy: [
      { question: "What is Astro?", options: ["A modern static site builder focused on performance and ease of use", "A CSS framework", "A database management system", "A JavaScript testing library"], answer: 0 },
      { question: "Which language is primarily used in Astro for writing components?", options: ["HTML and JavaScript", "Python", "PHP", "Ruby"], answer: 0 },
      { question: "How do you create a new Astro project?", options: ["npm create astro@latest", "npx create-react-app", "npm install astro", "npm init astro-app"], answer: 0 },
      { question: "What is the `.astro` file used for?", options: ["To define Astro components using HTML, JavaScript, and server-side logic", "To handle API requests", "To define CSS styles", "To manage databases"], answer: 0 },
      { question: "What is the purpose of `astro.config.mjs`?", options: ["To configure the Astro project, including integrations, routes, and optimizations", "To handle state management", "To configure database connections", "To manage global styles"], answer: 0 },
      { question: "What is the `src/pages` directory used for in Astro?", options: ["To define the routes and pages of the application", "To store API routes", "To handle form validation", "To manage CSS files"], answer: 0 },
      { question: "Which syntax is used to inject dynamic content in Astro components?", options: ["Curly braces `{}`", "Double quotes `\"\"`", "Square brackets `[]`", "Angle brackets `<>`"], answer: 0 },
      { question: "What is an Astro 'island'?", options: ["A dynamic, interactive part of a static page", "A database entity", "A static resource", "A CSS utility"], answer: 0 },
      { question: "What is the purpose of `Astro.fetchContent()`?", options: ["To fetch Markdown or MDX content from the file system", "To make API requests", "To manage state", "To handle form submissions"], answer: 0 },
      { question: "How do you link between pages in Astro?", options: ["Using the `<a>` tag", "Using the `Link` component", "Using `window.location.href`", "Using `React Router`"], answer: 0 },
      { question: "How do you define a layout in Astro?", options: ["By creating a layout component and using it in pages with `layout` frontmatter", "By defining layouts in `astro.config.mjs`", "By using inline styles", "By using CSS classes"], answer: 0 },
      { question: "Which of the following is a key feature of Astro?", options: ["Island architecture", "Virtual DOM", "Server-side routing only", "React-only framework"], answer: 0 },
      { question: "How do you use React components inside Astro?", options: ["By importing the component and using it with `client:load`, `client:visible`, or `client:idle`", "By using `<script>` tags", "By wrapping the component in a div", "By using `useEffect`"], answer: 0 },
      { question: "How do you pass props to a component in Astro?", options: ["Using standard HTML attributes", "Using JSON objects", "Using CSS classes", "Using global variables"], answer: 0 },
      { question: "What is the purpose of the `client:load` directive in Astro?", options: ["To load a component on the client-side after the page loads", "To fetch data from an API", "To manage state", "To create dynamic routes"], answer: 0 },
      { question: "Which of the following is an example of Astro's file-based routing?", options: ["Creating a `.astro` file in `src/pages` to automatically create a route", "Using `window.location` to navigate", "Using `app.use` for routing", "Using `Link` from React Router"], answer: 0 },
      { question: "What is the purpose of the `public` directory in an Astro project?", options: ["To store static assets like images and fonts", "To manage API routes", "To define CSS files", "To handle forms"], answer: 0 },
      { question: "How does Astro optimize performance?", options: ["By shipping zero JavaScript by default and using islands for interactive parts", "By preloading all JavaScript files", "By using inline styles only", "By caching pages"], answer: 0 },
      { question: "What does `MDX` stand for?", options: ["Markdown with JSX", "Modular Design X", "Multi-Device Experience", "Mobile Device XML"], answer: 0 },
    ],
    medium: [
      { question: "What is the purpose of `client:visible` in Astro?", options: ["To load a component when it becomes visible in the viewport", "To load a component when a page is loaded", "To load styles dynamically", "To fetch data when the component mounts"], answer: 0 },
      { question: "What is `getStaticPaths` used for in Astro?", options: ["To generate dynamic pages at build time by defining a list of paths", "To manage state", "To create dynamic imports", "To fetch client-side data"], answer: 0 },
      { question: "How do you import a CSS file in an Astro component?", options: ["Using `import './styles.css'` inside the component's frontmatter", "Using inline styles", "Using `StyleSheet.create()`", "Using `link` tags inside JSX"], answer: 0 },
      { question: "What is the purpose of `client:idle` in Astro?", options: ["To load a component when the browser is idle", "To load a component on page load", "To fetch data from an API", "To handle animations"], answer: 0 },
      { question: "What is the difference between static site generation (SSG) and server-side rendering (SSR) in Astro?", options: ["SSG generates HTML at build time, SSR generates HTML on each request", "SSG is faster than SSR", "SSG is for client-side data fetching only", "SSR is only for APIs"], answer: 0 },
      { question: "How do you add metadata like title and description to an Astro page?", options: ["Using the `set:html` directive in the frontmatter", "Using the `meta` component", "Using `head` tags inside JSX", "Using `window.document.title`"], answer: 0 },
      { question: "What is the purpose of Astro's Markdown integration?", options: ["To enable writing pages and content using Markdown and integrate it with components", "To handle forms", "To manage state", "To configure routes"], answer: 0 },
      { question: "What is `islands architecture` in Astro?", options: ["A model where most of the page is static, and only specific interactive parts are hydrated", "A serverless function model", "A way to handle forms", "A new CSS architecture"], answer: 0 },
      { question: "How do you define dynamic routes in Astro?", options: ["By using square brackets `[]` in filenames inside the `src/pages` directory", "By using `client:load` directive", "By using `useEffect`", "By using query parameters"], answer: 0 },
      { question: "How do you implement a 404 page in Astro?", options: ["By creating a `404.astro` file inside the `src/pages` directory", "By using `getStaticPaths`", "By using `client:idle`", "By defining it in `astro.config.mjs`"], answer: 0 },
      { question: "How does Astro handle data fetching for static sites?", options: ["Data fetching is done at build time using `getStaticPaths` and `fetch` in the frontmatter", "By using `useState` and `useEffect`", "By using the `Link` component", "By using `async/await` inside the JSX"], answer: 0 },
      { question: "How do you pass props to a Markdown page in Astro?", options: ["Using frontmatter with `export const` syntax", "Using `props` object", "Using `state`", "Using global variables"], answer: 0 },
      { question: "What is the purpose of the `Astro.glob()` method?", options: ["To dynamically import multiple Markdown or Astro files", "To handle form submissions", "To manage routing", "To fetch client-side data"], answer: 0 },
      { question: "What does the `pages/[[...slug]].astro` file define?", options: ["A catch-all route that handles any URL segment", "A layout component", "A Markdown file", "An error page"], answer: 0 },
      { question: "How do you include React, Vue, or Svelte components in an Astro project?", options: ["By installing integrations like `@astro/react`, `@astro/vue`, or `@astro/svelte`", "By converting them to `.astro` components", "By using them as `<iframe>`", "By importing them as JSON files"], answer: 0 },
      { question: "What is the purpose of `hydrate:idle` in Astro?", options: ["To hydrate a component only when the browser is idle", "To fetch data from an API", "To handle animations", "To style components"], answer: 0 },
      { question: "What is a partial hydration in Astro?", options: ["Only parts of the page (islands) are hydrated with JavaScript, leaving most of the page static", "Hydrating the entire page on client-side", "Loading styles only when needed", "Fetching all data before rendering"], answer: 0 },
      { question: "How does Astro handle CSS?", options: ["CSS is scoped to components by default, and global styles can be added via imports in `src` or `astro.config.mjs`", "CSS is written inline", "CSS is automatically global", "CSS is handled through JavaScript"], answer: 0 },
      { question: "What is `SSG` in Astro?", options: ["Static Site Generation, where pages are pre-rendered at build time", "Server-Side Generation", "Single-Page Generation", "Serverless State Generation"], answer: 0 },
      { question: "How do you optimize images in Astro?", options: ["Using the `@astrojs/image` integration", "Using inline styles", "Using the `Image` component", "Using `img` tags directly"], answer: 0 },
    ],
    hard: [
      { question: "What is Astro's approach to optimizing JavaScript bundles?", options: ["By default, Astro ships zero JavaScript unless it's needed for interactivity", "By minifying JavaScript files on build", "By preloading all JavaScript files", "By using the Virtual DOM"], answer: 0 },
      { question: "How do you implement server-side rendering (SSR) in Astro?", options: ["By enabling `output: 'server'` in `astro.config.mjs` and using the `getStaticPaths` method", "By using `useEffect`", "By creating a `.astro` file with dynamic imports", "By using `client:load` directive"], answer: 0 },
      { question: "What is the `set:html` directive used for in Astro?", options: ["To dangerously set raw HTML content inside a component", "To set the page's metadata", "To handle form submissions", "To manage styles dynamically"], answer: 0 },
      { question: "How do you handle client-side routing in Astro?", options: ["Astro doesn't handle client-side routing natively; you would need a client-side framework like React or Vue", "By using `getStaticPaths`", "By using query parameters", "By using `useEffect`"], answer: 0 },
      { question: "What is the purpose of the `getStaticPaths` function in Astro?", options: ["To pre-render dynamic pages at build time", "To handle navigation between pages", "To fetch client-side data", "To define API routes"], answer: 0 },
      { question: "How do you handle SEO optimization in Astro?", options: ["By using `set:html` to manage meta tags, titles, and descriptions", "By using JavaScript to dynamically set metadata", "By using the `client:visible` directive", "By adding SEO plugins in `astro.config.mjs`"], answer: 0 },
      { question: "What is `Astro Islands` architecture?", options: ["A performance optimization technique where most of the page is static, and only interactive islands are hydrated with JavaScript", "A way to create components in Astro", "A method to handle server-side rendering", "A routing technique in Astro"], answer: 0 },
      { question: "How do you create a dynamic route for blog posts in Astro?", options: ["By creating `[slug].astro` inside the `src/pages/blog` directory", "By using `client:load`", "By defining it in `astro.config.mjs`", "By using the `Link` component"], answer: 0 },
      { question: "How do you create custom components in Astro?", options: ["By creating `.astro` files in the `src/components` directory", "By defining them in `astro.config.mjs`", "By importing from React or Vue", "By using inline scripts"], answer: 0 },
      { question: "How do you integrate Astro with Tailwind CSS?", options: ["By installing the `@astrojs/tailwind` integration and configuring it in `astro.config.mjs`", "By using inline styles", "By importing Tailwind in every component", "By installing Tailwind as a React package"], answer: 0 },
      { question: "What is the `hydrate:client` directive used for?", options: ["To hydrate a component with JavaScript on the client-side immediately after page load", "To handle forms", "To manage state", "To fetch data from an API"], answer: 0 },
      { question: "How does Astro handle partial hydration of components?", options: ["By using `client:load`, `client:idle`, or `client:visible` directives on individual components", "By using inline styles", "By using server-side rendering", "By hydrating the entire page with JavaScript"], answer: 0 },
      { question: "How do you handle client-side data fetching in an Astro project?", options: ["By using the framework integration (e.g., React's `useEffect`) for client-side interactivity", "By using `getStaticProps`", "By using `getStaticPaths`", "By using `useState`"], answer: 0 },
      { question: "What is the purpose of the `@astrojs/sitemap` integration?", options: ["To automatically generate a sitemap for the Astro project", "To handle navigation", "To optimize images", "To create dynamic routes"], answer: 0 },
      { question: "What is the `Astro.build` method used for?", options: ["To trigger the build process and generate static HTML pages", "To run client-side scripts", "To compile CSS", "To fetch data"], answer: 0 },
      { question: "How does Astro handle conditional rendering?", options: ["Using JavaScript logic within curly braces inside `.astro` files", "Using the `ngIf` directive", "Using JSX conditionals", "Using `getStaticPaths`"], answer: 0 },
      { question: "How do you include environment variables in Astro?", options: ["Using `import.meta.env` to access environment variables", "By creating a `.env` file and using `process.env`", "By defining them in `astro.config.mjs`", "By using the `useEffect` hook"], answer: 0 },
      { question: "How do you integrate Google Analytics with Astro?", options: ["By adding the Google Analytics script inside `set:html` in the `<head>` section", "By using the `@astro/google` integration", "By importing `GoogleAnalytics` component", "By using the `client:load` directive"], answer: 0 },
      { question: "How do you create reusable layouts in Astro?", options: ["By creating layout components and using them with the `layout` frontmatter key", "By using inline styles", "By defining them in `astro.config.mjs`", "By importing from React"], answer: 0 },
      { question: "How do you handle external API calls in Astro?", options: ["By fetching data inside the frontmatter of a `.astro` file or using framework components for client-side fetching", "By using `useState` and `useEffect`", "By using the `fetch` API in JSX", "By handling the API in `astro.config.mjs`"], answer: 0 },
    ]
  }
};